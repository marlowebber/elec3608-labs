
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `nerv.yosys' --

1. Executing Verilog-2005 frontend: nerv_2stage.sv
Parsing SystemVerilog input from `nerv_2stage.sv' to AST representation.
Generating RTLIL representation for module `\nerv'.
Warning: wire '\insn' is assigned in a block at nerv_2stage.sv:86.
nerv_2stage.sv:372: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \nerv

2.2.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv_2stage.sv:358$75'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$nerv_2stage.sv:347$72 in module nerv.
Marked 19 switch rules as full_case in process $proc$nerv_2stage.sv:177$18 in module nerv.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nerv.$proc$nerv_2stage.sv:358$75'.
     1/7: $0\trapped_q[0:0]
     2/7: $0\reset_q[0:0]
     3/7: $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78
     4/7: $0$memwr$\regfile$nerv_2stage.sv:369$1_DATA[31:0]$77
     5/7: $0$memwr$\regfile$nerv_2stage.sv:369$1_ADDR[4:0]$76
     6/7: $0\trapped[0:0]
     7/7: $0\pc[31:0]
Creating decoders for process `\nerv.$proc$nerv_2stage.sv:347$72'.
     1/2: $1\mem_rdata[31:0]
     2/2: $0\mem_rdata[31:0]
Creating decoders for process `\nerv.$proc$nerv_2stage.sv:177$18'.
     1/69: $4\mem_wr_enable[0:0]
     2/69: $4\mem_rd_enable[0:0]
     3/69: $12\illinsn[0:0]
     4/69: $6\next_wr[0:0]
     5/69: $14\npc[31:0]
     6/69: $3\mem_wr_enable[0:0]
     7/69: $3\mem_rd_enable[0:0]
     8/69: $11\illinsn[0:0]
     9/69: $5\next_wr[0:0]
    10/69: $13\npc[31:0]
    11/69: $4\next_rd[31:0]
    12/69: $4\next_wr[0:0]
    13/69: $10\illinsn[0:0]
    14/69: $3\next_rd[31:0]
    15/69: $3\next_wr[0:0]
    16/69: $9\illinsn[0:0]
    17/69: $3\mem_wr_strb[3:0]
    18/69: $2\mem_wr_addr[31:0]
    19/69: $2\mem_wr_strb[3:0]
    20/69: $2\mem_wr_data[31:0]
    21/69: $2\mem_wr_enable[0:0]
    22/69: $8\illinsn[0:0]
    23/69: $2\mem_rd_addr[31:0]
    24/69: $2\mem_rd_func[4:0]
    25/69: $2\mem_rd_reg[4:0]
    26/69: $2\mem_rd_enable[0:0]
    27/69: $7\illinsn[0:0]
    28/69: $12\npc[31:0]
    29/69: $6\illinsn[0:0]
    30/69: $11\npc[31:0]
    31/69: $10\npc[31:0]
    32/69: $9\npc[31:0]
    33/69: $8\npc[31:0]
    34/69: $7\npc[31:0]
    35/69: $6\npc[31:0]
    36/69: $5\npc[31:0]
    37/69: $5\illinsn[0:0]
    38/69: $4\npc[31:0]
    39/69: $4\illinsn[0:0]
    40/69: $3\npc[31:0]
    41/69: $2\next_rd[31:0]
    42/69: $2\next_wr[0:0]
    43/69: $3\illinsn[0:0]
    44/69: $2\npc[31:0]
    45/69: $2\illinsn[0:0]
    46/69: $1\next_rd[31:0]
    47/69: $1\next_wr[0:0]
    48/69: $1\illinsn[0:0]
    49/69: $1\npc[31:0]
    50/69: $1\mem_rd_func[4:0]
    51/69: $1\mem_rd_reg[4:0]
    52/69: $1\mem_rd_addr[31:0]
    53/69: $1\mem_rd_enable[0:0]
    54/69: $1\mem_wr_strb[3:0]
    55/69: $1\mem_wr_data[31:0]
    56/69: $1\mem_wr_addr[31:0]
    57/69: $1\mem_wr_enable[0:0]
    58/69: $0\illinsn[0:0]
    59/69: $0\next_wr[0:0]
    60/69: $0\npc[31:0]
    61/69: $0\mem_rd_enable[0:0]
    62/69: $0\mem_wr_enable[0:0]
    63/69: $0\next_rd[31:0]
    64/69: $0\mem_rd_func[4:0]
    65/69: $0\mem_rd_reg[4:0]
    66/69: $0\mem_rd_addr[31:0]
    67/69: $0\mem_wr_strb[3:0]
    68/69: $0\mem_wr_data[31:0]
    69/69: $0\mem_wr_addr[31:0]
Creating decoders for process `\nerv.$proc$nerv_2stage.sv:83$9'.
     1/2: $0\insn[31:0]
     2/2: $0\imem_addr_q[31:0]
Creating decoders for process `\nerv.$proc$nerv_2stage.sv:55$2'.
     1/3: $0\mem_rd_func_q[4:0]
     2/3: $0\mem_rd_reg_q[4:0]
     3/3: $0\mem_rd_enable_q[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nerv.\mem_rdata' from process `\nerv.$proc$nerv_2stage.sv:347$72'.
No latch inferred for signal `\nerv.\mem_wr_enable' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_wr_addr' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_wr_data' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_wr_strb' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_rd_enable' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_rd_addr' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_rd_reg' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\mem_rd_func' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\npc' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\next_wr' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\next_rd' from process `\nerv.$proc$nerv_2stage.sv:177$18'.
No latch inferred for signal `\nerv.\illinsn' from process `\nerv.$proc$nerv_2stage.sv:177$18'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nerv.\pc' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$652' with positive edge clock.
Creating register for signal `\nerv.\trapped' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$653' with positive edge clock.
Creating register for signal `\nerv.\trapped_q' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$654' with positive edge clock.
Creating register for signal `\nerv.\reset_q' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$655' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv_2stage.sv:369$1_ADDR' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$656' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv_2stage.sv:369$1_DATA' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$657' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv_2stage.sv:369$1_EN' using process `\nerv.$proc$nerv_2stage.sv:358$75'.
  created $dff cell `$procdff$658' with positive edge clock.
Creating register for signal `\nerv.\insn' using process `\nerv.$proc$nerv_2stage.sv:83$9'.
  created $dff cell `$procdff$659' with positive edge clock.
Creating register for signal `\nerv.\imem_addr_q' using process `\nerv.$proc$nerv_2stage.sv:83$9'.
  created $dff cell `$procdff$660' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_enable_q' using process `\nerv.$proc$nerv_2stage.sv:55$2'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_reg_q' using process `\nerv.$proc$nerv_2stage.sv:55$2'.
  created $dff cell `$procdff$662' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_func_q' using process `\nerv.$proc$nerv_2stage.sv:55$2'.
  created $dff cell `$procdff$663' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\nerv.$proc$nerv_2stage.sv:358$75'.
Removing empty process `nerv.$proc$nerv_2stage.sv:358$75'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv_2stage.sv:347$72'.
Removing empty process `nerv.$proc$nerv_2stage.sv:347$72'.
Found and cleaned up 19 empty switches in `\nerv.$proc$nerv_2stage.sv:177$18'.
Removing empty process `nerv.$proc$nerv_2stage.sv:177$18'.
Removing empty process `nerv.$proc$nerv_2stage.sv:83$9'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv_2stage.sv:55$2'.
Removing empty process `nerv.$proc$nerv_2stage.sv:55$2'.
Cleaned up 25 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~32 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 142 unused wires.
<suppressed ~3 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~528 debug messages>
Removed a total of 176 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$266.
    dead port 2/2 on $mux $procmux$274.
    dead port 2/2 on $mux $procmux$282.
    dead port 2/2 on $mux $procmux$290.
    dead port 2/2 on $mux $procmux$299.
    dead port 2/2 on $mux $procmux$308.
    dead port 2/2 on $mux $procmux$258.
    dead port 2/2 on $mux $procmux$317.
    dead port 2/2 on $mux $procmux$162.
    dead port 2/2 on $mux $procmux$326.
    dead port 2/2 on $mux $procmux$335.
    dead port 2/2 on $mux $procmux$345.
    dead port 2/2 on $mux $procmux$355.
    dead port 2/2 on $mux $procmux$366.
    dead port 2/2 on $mux $procmux$368.
    dead port 2/2 on $mux $procmux$380.
    dead port 2/2 on $mux $procmux$382.
    dead port 2/2 on $mux $procmux$395.
    dead port 2/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$177.
    dead port 2/2 on $mux $procmux$411.
    dead port 2/2 on $mux $procmux$413.
    dead port 2/2 on $mux $procmux$428.
    dead port 2/2 on $mux $procmux$430.
    dead port 2/2 on $mux $procmux$446.
    dead port 2/2 on $mux $procmux$448.
    dead port 2/2 on $mux $procmux$192.
    dead port 2/2 on $mux $procmux$478.
    dead port 2/2 on $mux $procmux$489.
    dead port 2/2 on $mux $procmux$500.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$207.
    dead port 2/2 on $mux $procmux$533.
    dead port 2/2 on $mux $procmux$544.
    dead port 2/2 on $mux $procmux$556.
    dead port 2/2 on $mux $procmux$568.
    dead port 2/2 on $mux $procmux$222.
    dead port 2/2 on $mux $procmux$237.
Removed 38 multiplexer ports.
<suppressed ~23 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$298_ANY: { $procmux$203_CMP $procmux$206_CMP $procmux$298_CMP [1] $procmux$298_CMP [2] $procmux$298_CMP [4] }
    New input vector for $reduce_or cell $procmux$257_ANY: { $procmux$206_CMP $procmux$249_CMP [1] $procmux$249_CMP [2] }
    New ctrl vector for $pmux cell $procmux$166: $auto$opt_reduce.cc:132:opt_mux$665
    New ctrl vector for $pmux cell $procmux$181: $auto$opt_reduce.cc:132:opt_mux$667
    New ctrl vector for $pmux cell $procmux$471: $auto$opt_reduce.cc:132:opt_mux$669
    New ctrl vector for $pmux cell $procmux$212: $auto$opt_reduce.cc:132:opt_mux$671
    New ctrl vector for $pmux cell $procmux$579: { $auto$opt_reduce.cc:132:opt_mux$673 $procmux$490_CMP $procmux$208_CMP $procmux$163_CMP }
    New ctrl vector for $pmux cell $procmux$227: $auto$opt_reduce.cc:132:opt_mux$675
    New ctrl vector for $pmux cell $procmux$587: { $auto$opt_reduce.cc:132:opt_mux$677 $procmux$557_CMP $procmux$490_CMP $procmux$346_CMP $procmux$300_CMP $procmux$251_CMP $procmux$208_CMP $procmux$163_CMP }
    Consolidated identical input bits for $mux cell $procmux$91:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$91_Y
      New ports: A=1'0, B=1'1, Y=$procmux$91_Y [0]
      New connections: $procmux$91_Y [31:1] = { $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$664: { $procmux$152_CMP $procmux$153_CMP $procmux$154_CMP $procmux$155_CMP $procmux$156_CMP $procmux$157_CMP $procmux$158_CMP $procmux$159_CMP $procmux$160_CMP $procmux$161_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$666: { $procmux$152_CMP $procmux$153_CMP $procmux$154_CMP $procmux$155_CMP $procmux$156_CMP $procmux$157_CMP $procmux$158_CMP $procmux$159_CMP $procmux$160_CMP $procmux$161_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$668: { $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$206_CMP $procmux$246_CMP $procmux$396_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$670: { $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP $procmux$206_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$672: { $procmux$557_CMP $procmux$576_CMP $procmux$577_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$674: { $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP $procmux$206_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$676: { $procmux$576_CMP $procmux$577_CMP }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$93:
      Old ports: A=0, B=$procmux$91_Y, Y=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78
      New ports: A=1'0, B=$procmux$91_Y [0], Y=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0]
      New connections: $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31:1] = { $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [0] }
  Optimizing cells in module \nerv.
Performed a total of 18 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 187 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed cell nerv.$ternary$nerv_2stage.sv:66$4 ($mux).
Removed cell nerv.$ternary$nerv_2stage.sv:67$6 ($mux).
Removed cell nerv.$ternary$nerv_2stage.sv:68$8 ($mux).
Removed top 29 bits (of 32) from port B of cell nerv.$add$nerv_2stage.sv:179$19 ($add).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv_2stage.sv:213$24 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv_2stage.sv:228$29 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv_2stage.sv:244$44 ($and).
Removed top 27 bits (of 32) from port B of cell nerv.$shl$nerv_2stage.sv:281$50 ($shl).
Removed top 20 bits (of 32) from port B of cell nerv.$lt$nerv_2stage.sv:293$53 ($lt).
Removed top 27 bits (of 32) from port B of cell nerv.$shr$nerv_2stage.sv:348$74 ($shr).
Removed top 29 bits (of 32) from mux cell nerv.$ternary$nerv_2stage.sv:376$88 ($mux).
Removed top 31 bits (of 32) from port A of cell nerv.$sub$nerv_2stage.sv:376$89 ($sub).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv_2stage.sv:376$89 ($sub).
Removed cell nerv.$procmux$95 ($mux).
Removed cell nerv.$procmux$97 ($mux).
Removed cell nerv.$procmux$99 ($mux).
Removed cell nerv.$procmux$101 ($mux).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$117_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$153_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$152_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$154_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$155_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$156_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$157_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$158_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell nerv.$procmux$159_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$160_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$163_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$205_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$208_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$249_CMP1 ($eq).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$246_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$249_CMP2 ($eq).
Removed cell nerv.$procmux$248 ($mux).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$251_CMP0 ($eq).
Removed cell nerv.$procmux$250 ($mux).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$256 ($mux).
Removed cell nerv.$procmux$264 ($mux).
Removed cell nerv.$procmux$272 ($mux).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$298_CMP1 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$298_CMP2 ($eq).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$297 ($mux).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$300_CMP0 ($eq).
Removed cell nerv.$procmux$306 ($mux).
Removed cell nerv.$procmux$315 ($mux).
Removed cell nerv.$procmux$463 ($mux).
Removed cell nerv.$procmux$511 ($mux).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$576_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$577_CMP0 ($eq).
Removed cell nerv.$procmux$610 ($mux).
Removed cell nerv.$procmux$616 ($mux).
Removed cell nerv.$procmux$622 ($mux).
Removed cell nerv.$procmux$633 ($mux).
Removed cell nerv.$procmux$638 ($mux).
Removed cell nerv.$procmux$643 ($mux).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$658 ($dff).
Removed top 31 bits (of 32) from wire nerv.$lt$nerv_2stage.sv:293$53_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv_2stage.sv:294$54_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv_2stage.sv:311$64_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv_2stage.sv:312$65_Y.
Removed top 29 bits (of 32) from wire nerv.$ternary$nerv_2stage.sv:376$88_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 9 cells in module nerv that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$nerv_2stage.sv:315$68 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q }.
    Found 1 candidates: $sshr$nerv_2stage.sv:300$60
    Analyzing resource sharing with $sshr$nerv_2stage.sv:300$60 ($sshr):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$154_CMP \mem_rd_enable_q }.
      Activation pattern for cell $sshr$nerv_2stage.sv:315$68: { $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $sshr$nerv_2stage.sv:300$60: { $procmux$208_CMP $procmux$154_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 3 cells, 88 variables, 226 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $sshr$nerv_2stage.sv:315$68: $auto$share.cc:976:make_cell_activation_logic$683
      New cell: $auto$share.cc:666:make_supercell$690 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$690 ($sshr):
    Found 2 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shr$nerv_2stage.sv:348$74 ($shr):
    Found 5 activation_patterns using ctrl signal { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    Found 2 candidates: $shr$nerv_2stage.sv:314$67 $shr$nerv_2stage.sv:299$59
    Analyzing resource sharing with $shr$nerv_2stage.sv:314$67 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv_2stage.sv:348$74: { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv_2stage.sv:348$74: { $procmux$115_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv_2stage.sv:348$74: { $procmux$116_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv_2stage.sv:348$74: { $procmux$117_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv_2stage.sv:348$74: { $procmux$118_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv_2stage.sv:314$67: { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$116_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$117_CMP vs. $procmux$118_CMP
      Size of SAT problem: 6 cells, 149 variables, 406 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv_2stage.sv:314$67: $auto$share.cc:976:make_cell_activation_logic$693
      New cell: $auto$share.cc:666:make_supercell$700 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$700 ($shr):
    Found 6 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$155_CMP $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    Found 1 candidates: $shr$nerv_2stage.sv:299$59
    Analyzing resource sharing with $shr$nerv_2stage.sv:299$59 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$155_CMP \mem_rd_enable_q }.
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$115_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$116_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$117_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$118_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$700: { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $shr$nerv_2stage.sv:299$59: { $procmux$208_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$116_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$117_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 7 cells, 166 variables, 467 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv_2stage.sv:299$59: $auto$share.cc:976:make_cell_activation_logic$703
      New cell: $auto$share.cc:666:make_supercell$710 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$710 ($shr):
    Found 7 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$155_CMP $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shl$nerv_2stage.sv:310$63 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q }.
    Found 1 candidates: $shl$nerv_2stage.sv:298$58
    Analyzing resource sharing with $shl$nerv_2stage.sv:298$58 ($shl):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$159_CMP \mem_rd_enable_q }.
      Activation pattern for cell $shl$nerv_2stage.sv:310$63: { $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $shl$nerv_2stage.sv:298$58: { $procmux$208_CMP $procmux$159_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 3 cells, 88 variables, 226 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$nerv_2stage.sv:310$63: $auto$share.cc:976:make_cell_activation_logic$713
      New cell: $auto$share.cc:666:make_supercell$720 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$720 ($shl):
    Found 2 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\regfile$nerv_2stage.sv:97$16 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv_2stage.sv:97$15_Y.
    Found 1 candidates: $memrd$\regfile$nerv_2stage.sv:96$13
    Analyzing resource sharing with $memrd$\regfile$nerv_2stage.sv:96$13 ($memrd):
      Found 1 activation_patterns using ctrl signal $logic_not$nerv_2stage.sv:96$12_Y.
      Forbidden control signals for this pair of cells: { $procmux$488_CMP $procmux$344_CMP $procmux$298_CTRL $procmux$249_CTRL $ge$nerv_2stage.sv:241$42_Y $lt$nerv_2stage.sv:240$40_Y $ge$nerv_2stage.sv:239$38_Y $lt$nerv_2stage.sv:238$36_Y $ne$nerv_2stage.sv:237$34_Y $eq$nerv_2stage.sv:236$32_Y \illinsn \mem_wr_enable }
      Activation pattern for cell $memrd$\regfile$nerv_2stage.sv:97$16: $logic_not$nerv_2stage.sv:97$15_Y = 1'0
      Activation pattern for cell $memrd$\regfile$nerv_2stage.sv:96$13: $logic_not$nerv_2stage.sv:96$12_Y = 1'0
      Size of SAT problem: 2 cells, 27 variables, 51 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $logic_not$nerv_2stage.sv:96$12_Y $logic_not$nerv_2stage.sv:97$15_Y } = 2'00
  Analyzing resource sharing options for $memrd$\regfile$nerv_2stage.sv:96$13 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv_2stage.sv:96$12_Y.
    No candidates found.
Removing 8 cells in module nerv:
  Removing cell $shl$nerv_2stage.sv:298$58 ($shl).
  Removing cell $shl$nerv_2stage.sv:310$63 ($shl).
  Removing cell $shr$nerv_2stage.sv:299$59 ($shr).
  Removing cell $auto$share.cc:666:make_supercell$700 ($shr).
  Removing cell $shr$nerv_2stage.sv:314$67 ($shr).
  Removing cell $shr$nerv_2stage.sv:348$74 ($shr).
  Removing cell $sshr$nerv_2stage.sv:300$60 ($sshr).
  Removing cell $sshr$nerv_2stage.sv:315$68 ($sshr).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~624 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2 debug messages>

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 61 unused wires.
<suppressed ~9 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module nerv:
  creating $macc model for $add$nerv_2stage.sv:179$19 ($add).
  creating $macc model for $add$nerv_2stage.sv:206$22 ($add).
  creating $macc model for $add$nerv_2stage.sv:212$23 ($add).
  creating $macc model for $add$nerv_2stage.sv:224$27 ($add).
  creating $macc model for $add$nerv_2stage.sv:236$33 ($add).
  creating $macc model for $add$nerv_2stage.sv:268$48 ($add).
  creating $macc model for $add$nerv_2stage.sv:308$61 ($add).
  creating $macc model for $sub$nerv_2stage.sv:309$62 ($sub).
  creating $macc model for $sub$nerv_2stage.sv:376$89 ($sub).
  creating $alu model for $macc $sub$nerv_2stage.sv:376$89.
  creating $alu model for $macc $sub$nerv_2stage.sv:309$62.
  creating $alu model for $macc $add$nerv_2stage.sv:308$61.
  creating $alu model for $macc $add$nerv_2stage.sv:268$48.
  creating $alu model for $macc $add$nerv_2stage.sv:236$33.
  creating $alu model for $macc $add$nerv_2stage.sv:224$27.
  creating $alu model for $macc $add$nerv_2stage.sv:212$23.
  creating $alu model for $macc $add$nerv_2stage.sv:206$22.
  creating $alu model for $macc $add$nerv_2stage.sv:179$19.
  creating $alu model for $ge$nerv_2stage.sv:239$38 ($ge): new $alu
  creating $alu model for $ge$nerv_2stage.sv:241$42 ($ge): merged with $sub$nerv_2stage.sv:309$62.
  creating $alu model for $lt$nerv_2stage.sv:238$36 ($lt): merged with $ge$nerv_2stage.sv:239$38.
  creating $alu model for $lt$nerv_2stage.sv:240$40 ($lt): merged with $sub$nerv_2stage.sv:309$62.
  creating $alu model for $lt$nerv_2stage.sv:293$53 ($lt): new $alu
  creating $alu model for $lt$nerv_2stage.sv:294$54 ($lt): new $alu
  creating $alu model for $lt$nerv_2stage.sv:311$64 ($lt): merged with $ge$nerv_2stage.sv:239$38.
  creating $alu model for $lt$nerv_2stage.sv:312$65 ($lt): merged with $sub$nerv_2stage.sv:309$62.
  creating $alu model for $eq$nerv_2stage.sv:236$32 ($eq): merged with $sub$nerv_2stage.sv:309$62.
  creating $alu model for $ne$nerv_2stage.sv:237$34 ($ne): merged with $sub$nerv_2stage.sv:309$62.
  creating $alu cell for $lt$nerv_2stage.sv:293$53: $auto$alumacc.cc:474:replace_alu$752
  creating $alu cell for $add$nerv_2stage.sv:179$19: $auto$alumacc.cc:474:replace_alu$765
  creating $alu cell for $add$nerv_2stage.sv:206$22: $auto$alumacc.cc:474:replace_alu$768
  creating $alu cell for $add$nerv_2stage.sv:212$23: $auto$alumacc.cc:474:replace_alu$771
  creating $alu cell for $lt$nerv_2stage.sv:294$54: $auto$alumacc.cc:474:replace_alu$774
  creating $alu cell for $add$nerv_2stage.sv:224$27: $auto$alumacc.cc:474:replace_alu$779
  creating $alu cell for $add$nerv_2stage.sv:236$33: $auto$alumacc.cc:474:replace_alu$782
  creating $alu cell for $add$nerv_2stage.sv:268$48: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $ge$nerv_2stage.sv:239$38, $lt$nerv_2stage.sv:238$36, $lt$nerv_2stage.sv:311$64: $auto$alumacc.cc:474:replace_alu$788
  creating $alu cell for $add$nerv_2stage.sv:308$61: $auto$alumacc.cc:474:replace_alu$803
  creating $alu cell for $sub$nerv_2stage.sv:309$62, $ge$nerv_2stage.sv:241$42, $lt$nerv_2stage.sv:240$40, $lt$nerv_2stage.sv:312$65, $eq$nerv_2stage.sv:236$32, $ne$nerv_2stage.sv:237$34: $auto$alumacc.cc:474:replace_alu$806
  creating $alu cell for $sub$nerv_2stage.sv:376$89: $auto$alumacc.cc:474:replace_alu$821
  created 12 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$801: { $auto$rtlil.cc:1832:Not$800 $auto$rtlil.cc:1835:ReduceAnd$792 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$809: { $auto$alumacc.cc:490:replace_alu$807 [0] $auto$alumacc.cc:490:replace_alu$807 [1] $auto$alumacc.cc:490:replace_alu$807 [2] $auto$alumacc.cc:490:replace_alu$807 [3] $auto$alumacc.cc:490:replace_alu$807 [4] $auto$alumacc.cc:490:replace_alu$807 [5] $auto$alumacc.cc:490:replace_alu$807 [6] $auto$alumacc.cc:490:replace_alu$807 [7] $auto$alumacc.cc:490:replace_alu$807 [8] $auto$alumacc.cc:490:replace_alu$807 [9] $auto$alumacc.cc:490:replace_alu$807 [10] $auto$alumacc.cc:490:replace_alu$807 [11] $auto$alumacc.cc:490:replace_alu$807 [12] $auto$alumacc.cc:490:replace_alu$807 [13] $auto$alumacc.cc:490:replace_alu$807 [14] $auto$alumacc.cc:490:replace_alu$807 [15] $auto$alumacc.cc:490:replace_alu$807 [16] $auto$alumacc.cc:490:replace_alu$807 [17] $auto$alumacc.cc:490:replace_alu$807 [18] $auto$alumacc.cc:490:replace_alu$807 [19] $auto$alumacc.cc:490:replace_alu$807 [20] $auto$alumacc.cc:490:replace_alu$807 [21] $auto$alumacc.cc:490:replace_alu$807 [22] $auto$alumacc.cc:490:replace_alu$807 [23] $auto$alumacc.cc:490:replace_alu$807 [24] $auto$alumacc.cc:490:replace_alu$807 [25] $auto$alumacc.cc:490:replace_alu$807 [26] $auto$alumacc.cc:490:replace_alu$807 [27] $auto$alumacc.cc:490:replace_alu$807 [28] $auto$alumacc.cc:490:replace_alu$807 [29] $auto$alumacc.cc:490:replace_alu$807 [30] $auto$alumacc.cc:490:replace_alu$807 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$755: { $auto$alumacc.cc:490:replace_alu$753 [0] $auto$alumacc.cc:490:replace_alu$753 [1] $auto$alumacc.cc:490:replace_alu$753 [2] $auto$alumacc.cc:490:replace_alu$753 [3] $auto$alumacc.cc:490:replace_alu$753 [4] $auto$alumacc.cc:490:replace_alu$753 [5] $auto$alumacc.cc:490:replace_alu$753 [6] $auto$alumacc.cc:490:replace_alu$753 [7] $auto$alumacc.cc:490:replace_alu$753 [8] $auto$alumacc.cc:490:replace_alu$753 [9] $auto$alumacc.cc:490:replace_alu$753 [10] $auto$alumacc.cc:490:replace_alu$753 [11] $auto$alumacc.cc:490:replace_alu$753 [12] $auto$alumacc.cc:490:replace_alu$753 [13] $auto$alumacc.cc:490:replace_alu$753 [14] $auto$alumacc.cc:490:replace_alu$753 [15] $auto$alumacc.cc:490:replace_alu$753 [16] $auto$alumacc.cc:490:replace_alu$753 [17] $auto$alumacc.cc:490:replace_alu$753 [18] $auto$alumacc.cc:490:replace_alu$753 [19] $auto$alumacc.cc:490:replace_alu$753 [20] $auto$alumacc.cc:490:replace_alu$753 [21] $auto$alumacc.cc:490:replace_alu$753 [22] $auto$alumacc.cc:490:replace_alu$753 [23] $auto$alumacc.cc:490:replace_alu$753 [24] $auto$alumacc.cc:490:replace_alu$753 [25] $auto$alumacc.cc:490:replace_alu$753 [26] $auto$alumacc.cc:490:replace_alu$753 [27] $auto$alumacc.cc:490:replace_alu$753 [28] $auto$alumacc.cc:490:replace_alu$753 [29] $auto$alumacc.cc:490:replace_alu$753 [30] $auto$alumacc.cc:490:replace_alu$753 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$791: { $auto$alumacc.cc:490:replace_alu$789 [0] $auto$alumacc.cc:490:replace_alu$789 [1] $auto$alumacc.cc:490:replace_alu$789 [2] $auto$alumacc.cc:490:replace_alu$789 [3] $auto$alumacc.cc:490:replace_alu$789 [4] $auto$alumacc.cc:490:replace_alu$789 [5] $auto$alumacc.cc:490:replace_alu$789 [6] $auto$alumacc.cc:490:replace_alu$789 [7] $auto$alumacc.cc:490:replace_alu$789 [8] $auto$alumacc.cc:490:replace_alu$789 [9] $auto$alumacc.cc:490:replace_alu$789 [10] $auto$alumacc.cc:490:replace_alu$789 [11] $auto$alumacc.cc:490:replace_alu$789 [12] $auto$alumacc.cc:490:replace_alu$789 [13] $auto$alumacc.cc:490:replace_alu$789 [14] $auto$alumacc.cc:490:replace_alu$789 [15] $auto$alumacc.cc:490:replace_alu$789 [16] $auto$alumacc.cc:490:replace_alu$789 [17] $auto$alumacc.cc:490:replace_alu$789 [18] $auto$alumacc.cc:490:replace_alu$789 [19] $auto$alumacc.cc:490:replace_alu$789 [20] $auto$alumacc.cc:490:replace_alu$789 [21] $auto$alumacc.cc:490:replace_alu$789 [22] $auto$alumacc.cc:490:replace_alu$789 [23] $auto$alumacc.cc:490:replace_alu$789 [24] $auto$alumacc.cc:490:replace_alu$789 [25] $auto$alumacc.cc:490:replace_alu$789 [26] $auto$alumacc.cc:490:replace_alu$789 [27] $auto$alumacc.cc:490:replace_alu$789 [28] $auto$alumacc.cc:490:replace_alu$789 [29] $auto$alumacc.cc:490:replace_alu$789 [30] $auto$alumacc.cc:490:replace_alu$789 [31] }
  Optimizing cells in module \nerv.
Performed a total of 4 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\regfile$nerv_2stage.sv:369$90' in module `\nerv': merged $dff to cell.
Checking cell `$memrd$\regfile$nerv_2stage.sv:96$13' in module `\nerv': merged address $dff to cell.
Checking cell `$memrd$\regfile$nerv_2stage.sv:97$16' in module `\nerv': merged address $dff to cell.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\nerv':
  $memwr$\regfile$nerv_2stage.sv:369$90 ($memwr)
  $memrd$\regfile$nerv_2stage.sv:96$13 ($memrd)
  $memrd$\regfile$nerv_2stage.sv:97$16 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing nerv.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7168 efficiency=6
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7680 efficiency=3
      Storing for later selection.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Mapped to bram port A1.2.
      Updated properties: dups=2 waste=7936 efficiency=1
    Rule for bram type $__ICE40_RAM4K_M123 rejected: requirement 'min efficiency 2' not met.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  Selecting best of 2 rules:
    Efficiency for rule 2.1: efficiency=3, cells=8, acells=1
    Efficiency for rule 1.1: efficiency=6, cells=4, acells=1
    Selected rule 1.1 with efficiency 6.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Failed to map read port #1.
      Growing more read ports by duplicating bram cells.
      Read port #0 is in clock domain \clock.
        Mapped to bram port A1.1.
      Read port #1 is in clock domain \clock.
        Mapped to bram port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 0>: regfile.0.0.0
        Adding extra logic for transparent port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <0 0 1>: regfile.0.0.1
        Adding extra logic for transparent port A1.2.
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 0>: regfile.1.0.0
        Adding extra logic for transparent port A1.1.
      Creating $__ICE40_RAM4K_M0 cell at grid position <1 0 1>: regfile.1.0.1
        Adding extra logic for transparent port A1.2.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
Using template $paramod\$__ICE40_RAM4K_M0\CLKPOL2=1\CLKPOL3=1 for cells of type $__ICE40_RAM4K_M0.
Using template $paramod$4200c10d2e07b3359d49ca78f8f6d43ec6f7e316\$__ICE40_RAM4K for cells of type $__ICE40_RAM4K.
No more expansions possible.
<suppressed ~48 debug messages>

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~72 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~27 debug messages>
Removed a total of 9 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 137 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$298_ANY: { $2\next_wr[0:0] $procmux$203_CMP $procmux$298_CMP [1] $procmux$298_CMP [2] $procmux$298_CMP [4] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$674: { $2\next_wr[0:0] $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$668: { $2\next_wr[0:0] $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$246_CMP $procmux$396_CMP }
    Consolidated identical input bits for $mux cell $auto$memory_bram.cc:938:replace_cell$920:
      Old ports: A=16'0000000000000000, B={ $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] }, Y=$auto$rtlil.cc:1906:Mux$838
      New ports: A=1'0, B=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31], Y=$auto$rtlil.cc:1906:Mux$838 [0]
      New connections: $auto$rtlil.cc:1906:Mux$838 [15:1] = { $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] $auto$rtlil.cc:1906:Mux$838 [0] }
    Consolidated identical input bits for $mux cell $auto$memory_bram.cc:938:replace_cell$959:
      Old ports: A=16'0000000000000000, B={ $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] $0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31] }, Y=$auto$rtlil.cc:1906:Mux$877
      New ports: A=1'0, B=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31], Y=$auto$rtlil.cc:1906:Mux$877 [0]
      New connections: $auto$rtlil.cc:1906:Mux$877 [15:1] = { $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] $auto$rtlil.cc:1906:Mux$877 [0] }
    Consolidated identical input bits for $pmux cell $procmux$114:
      Old ports: A=$auto$share.cc:662:make_supercell$699, B={ $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7:0] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15:0] 24'000000000000000000000000 $auto$share.cc:662:make_supercell$699 [7:0] 16'0000000000000000 $auto$share.cc:662:make_supercell$699 [15:0] }, Y=\mem_rdata
      New ports: A=$auto$share.cc:662:make_supercell$699 [31:8], B={ $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [7] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15] $auto$share.cc:662:make_supercell$699 [15:8] 40'0000000000000000000000000000000000000000 $auto$share.cc:662:make_supercell$699 [15:8] }, Y=\mem_rdata [31:8]
      New connections: \mem_rdata [7:0] = $auto$share.cc:662:make_supercell$699 [7:0]
    Consolidated identical input bits for $pmux cell $procmux$245:
      Old ports: A=4'1111, B=8'00010011, Y=$3\mem_wr_strb[3:0]
      New ports: A=2'11, B=4'0001, Y=$3\mem_wr_strb[3:0] [2:1]
      New connections: { $3\mem_wr_strb[3:0] [3] $3\mem_wr_strb[3:0] [0] } = { $3\mem_wr_strb[3:0] [2] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$343:
      Old ports: A=$5\npc[31:0], B={ $5\npc[31:0] [31:2] 2'00 }, Y=$12\npc[31:0]
      New ports: A=$5\npc[31:0] [1:0], B=2'00, Y=$12\npc[31:0] [1:0]
      New connections: $12\npc[31:0] [31:2] = $5\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$487:
      Old ports: A=$3\npc[31:0], B={ $3\npc[31:0] [31:2] 2'00 }, Y=$4\npc[31:0]
      New ports: A=$3\npc[31:0] [1:0], B=2'00, Y=$4\npc[31:0] [1:0]
      New connections: $4\npc[31:0] [31:2] = $3\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$554:
      Old ports: A=$add$nerv_2stage.sv:212$23_Y, B={ $add$nerv_2stage.sv:212$23_Y [31:2] 2'00 }, Y=$2\npc[31:0]
      New ports: A=$add$nerv_2stage.sv:212$23_Y [1:0], B=2'00, Y=$2\npc[31:0] [1:0]
      New connections: $2\npc[31:0] [31:2] = $add$nerv_2stage.sv:212$23_Y [31:2]
    Consolidated identical input bits for $mux cell $ternary$nerv_2stage.sv:376$88:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:455:run$682 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$682 [2]
      New connections: $auto$wreduce.cc:455:run$682 [1:0] = 2'00
  Optimizing cells in module \nerv.
Performed a total of 11 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~26 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$constmap:6e3026a439ed4a6e7983ca0e910890cc59b2f7b2$paramod$639848c0e6c2f57a2478574ca6c566bbce1f0807\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.30. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1564 debug messages>

2.30.31. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~192 debug messages>
Removed 0 unused cells and 10 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=12\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~604 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~1218 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~2331 debug messages>
Removed a total of 777 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 243 unused cells and 1025 unused wires.
<suppressed ~244 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$771.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$782.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[10].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [10]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [11]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [12]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [13]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [14]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [15]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [16]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [17]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [18]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [19]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [1]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [20]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [21]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [22]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [23]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [24]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [25]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [26]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [27]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [28]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [29]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [30]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[3].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [3]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[4].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [4]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [5]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[6].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [6]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[7].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [7]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[8].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [8]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[9].carry: CO=$auto$alumacc.cc:474:replace_alu$821.C [9]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$771.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$782.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[0].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[10].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[11].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[12].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[13].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[14].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[15].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[16].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[17].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[18].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[19].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[20].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[21].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[22].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[23].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[24].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[25].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[26].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[27].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[28].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[29].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[30].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[31].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[4].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[5].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[6].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[7].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[8].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[9].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~487 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 138 unused wires.
<suppressed ~3 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[2].carry: CO=$auto$alumacc.cc:474:replace_alu$821.BB [2]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$821.slice[3].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[2].carry: CO=\pc [2]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[2].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~26 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[3].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[4].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[5].adder back to logic.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[5].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[6].adder back to logic.

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[6].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[7].adder back to logic.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.48. Rerunning OPT passes. (Removed registers in this run.)

2.31.49. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[7].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[8].adder back to logic.

2.31.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.52. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.54. Rerunning OPT passes. (Removed registers in this run.)

2.31.55. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[8].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[9].adder back to logic.

2.31.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.58. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.60. Rerunning OPT passes. (Removed registers in this run.)

2.31.61. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[9].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[10].adder back to logic.

2.31.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.64. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.66. Rerunning OPT passes. (Removed registers in this run.)

2.31.67. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[10].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[11].adder back to logic.

2.31.68. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.70. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.71. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.72. Rerunning OPT passes. (Removed registers in this run.)

2.31.73. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[11].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[12].adder back to logic.

2.31.74. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~11 debug messages>

2.31.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.76. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.31.78. Rerunning OPT passes. (Removed registers in this run.)

2.31.79. Running ICE40 specific optimizations.

2.31.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.31.81. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.31.82. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.31.84. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module nerv:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4798 to $_DFFE_PP_ for $0\pc[31:0] [0] -> \pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4799 to $_DFFE_PP_ for $0\pc[31:0] [1] -> \pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4800 to $_DFFE_PP_ for $0\pc[31:0] [2] -> \pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4801 to $_DFFE_PP_ for $0\pc[31:0] [3] -> \pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4802 to $_DFFE_PP_ for $0\pc[31:0] [4] -> \pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4803 to $_DFFE_PP_ for $0\pc[31:0] [5] -> \pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4804 to $_DFFE_PP_ for $0\pc[31:0] [6] -> \pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4805 to $_DFFE_PP_ for $0\pc[31:0] [7] -> \pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4806 to $_DFFE_PP_ for $0\pc[31:0] [8] -> \pc [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4807 to $_DFFE_PP_ for $0\pc[31:0] [9] -> \pc [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4808 to $_DFFE_PP_ for $0\pc[31:0] [10] -> \pc [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4809 to $_DFFE_PP_ for $0\pc[31:0] [11] -> \pc [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4810 to $_DFFE_PP_ for $0\pc[31:0] [12] -> \pc [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4811 to $_DFFE_PP_ for $0\pc[31:0] [13] -> \pc [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4812 to $_DFFE_PP_ for $0\pc[31:0] [14] -> \pc [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4813 to $_DFFE_PP_ for $0\pc[31:0] [15] -> \pc [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4814 to $_DFFE_PP_ for $0\pc[31:0] [16] -> \pc [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4815 to $_DFFE_PP_ for $0\pc[31:0] [17] -> \pc [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4816 to $_DFFE_PP_ for $0\pc[31:0] [18] -> \pc [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4817 to $_DFFE_PP_ for $0\pc[31:0] [19] -> \pc [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4818 to $_DFFE_PP_ for $0\pc[31:0] [20] -> \pc [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4819 to $_DFFE_PP_ for $0\pc[31:0] [21] -> \pc [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4820 to $_DFFE_PP_ for $0\pc[31:0] [22] -> \pc [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4821 to $_DFFE_PP_ for $0\pc[31:0] [23] -> \pc [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4822 to $_DFFE_PP_ for $0\pc[31:0] [24] -> \pc [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4823 to $_DFFE_PP_ for $0\pc[31:0] [25] -> \pc [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4824 to $_DFFE_PP_ for $0\pc[31:0] [26] -> \pc [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4825 to $_DFFE_PP_ for $0\pc[31:0] [27] -> \pc [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4826 to $_DFFE_PP_ for $0\pc[31:0] [28] -> \pc [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4827 to $_DFFE_PP_ for $0\pc[31:0] [29] -> \pc [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4828 to $_DFFE_PP_ for $0\pc[31:0] [30] -> \pc [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4829 to $_DFFE_PP_ for $0\pc[31:0] [31] -> \pc [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4877 to $_DFFE_PP_ for $0\trapped[0:0] -> \trapped.

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~143 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~102 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in nerv.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in nerv.
  Merging $auto$simplemap.cc:277:simplemap_mux$4711 (A=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$4719) into $auto$simplemap.cc:420:simplemap_dff$3978 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3184 (A=\npc [1], B=1'0, S=$logic_or$nerv_2stage.sv:334$71_Y) into $auto$simplemap.cc:420:simplemap_dff$4799 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4418 (A=$0$memwr$\regfile$nerv_2stage.sv:369$1_EN[31:0]$78 [31], B=1'0, S=$auto$simplemap.cc:256:simplemap_eqne$4406) into $auto$simplemap.cc:420:simplemap_dff$4466 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$3183 (A=\npc [0], B=1'0, S=$logic_or$nerv_2stage.sv:334$71_Y) into $auto$simplemap.cc:420:simplemap_dff$4798 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4876 (A=\mem_rd_enable, B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$4943 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~184 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 5 unused cells and 569 unused wires.
<suppressed ~6 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\nerv' to `<abc-temp-dir>/input.blif'..
Extracted 3749 gates and 4248 wires to a netlist network with 497 inputs and 319 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =     884.
ABC: Participating nodes from both networks       =    1964.
ABC: Participating nodes from the first network   =     954. (  58.03 % of nodes)
ABC: Participating nodes from the second network  =    1010. (  61.44 % of nodes)
ABC: Node pairs (any polarity)                    =     953. (  57.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =     523. (  31.81 % of names can be moved)
ABC: Total runtime =     0.16 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     3286
ABC RESULTS:        internal signals:     3432
ABC RESULTS:           input signals:      497
ABC RESULTS:          output signals:      319
Removing temp directory.
Removed 0 unused cells and 1240 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100000000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000001001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000000110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110011001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110011001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110011000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101110110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111011100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011001100111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111100001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111100111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100110011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010000001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100001111 for cells of type $lut.
No more expansions possible.
<suppressed ~3425 debug messages>
Removed 0 unused cells and 3286 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \nerv

2.43.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.44. Printing statistics.

=== nerv ===

   Number of wires:               1718
   Number of wire bits:           2875
   Number of public wires:          42
   Number of public wire bits:     730
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2359
     SB_CARRY                      328
     SB_DFF                        107
     SB_DFFE                        31
     SB_DFFESR                       2
     SB_DFFSR                        3
     SB_LUT4                      1884
     SB_RAM40_4K                     4

2.45. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.46. Executing JSON backend.

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: b3d809e430
CPU: user 8.13s system 0.04s, MEM: 53.30 MB total, 47.70 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 35x opt_expr (2 sec), 24% 27x opt_merge (1 sec), 23% 31x opt_clean (1 sec), ...
