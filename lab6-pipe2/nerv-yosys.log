
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `nerv.yosys' --

1. Executing Verilog-2005 frontend: nerv.sv
Parsing SystemVerilog input from `nerv.sv' to AST representation.
Generating RTLIL representation for module `\nerv'.
nerv.sv:363: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \nerv

2.2.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:349$75'.
Cleaned up 1 empty switch.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$nerv.sv:338$72 in module nerv.
Marked 19 switch rules as full_case in process $proc$nerv.sv:168$18 in module nerv.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_INIT pass (extract init attributes).

2.3.4. Executing PROC_ARST pass (detect async resets in processes).

2.3.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\nerv.$proc$nerv.sv:349$75'.
     1/7: $0\trapped_q[0:0]
     2/7: $0\reset_q[0:0]
     3/7: $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78
     4/7: $0$memwr$\regfile$nerv.sv:360$1_DATA[31:0]$77
     5/7: $0$memwr$\regfile$nerv.sv:360$1_ADDR[4:0]$76
     6/7: $0\trapped[0:0]
     7/7: $0\pc[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:338$72'.
     1/2: $1\mem_rdata[31:0]
     2/2: $0\mem_rdata[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:168$18'.
     1/69: $4\mem_wr_enable[0:0]
     2/69: $4\mem_rd_enable[0:0]
     3/69: $12\illinsn[0:0]
     4/69: $6\next_wr[0:0]
     5/69: $14\npc[31:0]
     6/69: $3\mem_wr_enable[0:0]
     7/69: $3\mem_rd_enable[0:0]
     8/69: $11\illinsn[0:0]
     9/69: $5\next_wr[0:0]
    10/69: $13\npc[31:0]
    11/69: $4\next_rd[31:0]
    12/69: $4\next_wr[0:0]
    13/69: $10\illinsn[0:0]
    14/69: $3\next_rd[31:0]
    15/69: $3\next_wr[0:0]
    16/69: $9\illinsn[0:0]
    17/69: $3\mem_wr_strb[3:0]
    18/69: $2\mem_wr_addr[31:0]
    19/69: $2\mem_wr_strb[3:0]
    20/69: $2\mem_wr_data[31:0]
    21/69: $2\mem_wr_enable[0:0]
    22/69: $8\illinsn[0:0]
    23/69: $2\mem_rd_addr[31:0]
    24/69: $2\mem_rd_func[4:0]
    25/69: $2\mem_rd_reg[4:0]
    26/69: $2\mem_rd_enable[0:0]
    27/69: $7\illinsn[0:0]
    28/69: $12\npc[31:0]
    29/69: $6\illinsn[0:0]
    30/69: $11\npc[31:0]
    31/69: $10\npc[31:0]
    32/69: $9\npc[31:0]
    33/69: $8\npc[31:0]
    34/69: $7\npc[31:0]
    35/69: $6\npc[31:0]
    36/69: $5\npc[31:0]
    37/69: $5\illinsn[0:0]
    38/69: $4\npc[31:0]
    39/69: $4\illinsn[0:0]
    40/69: $3\npc[31:0]
    41/69: $2\next_rd[31:0]
    42/69: $2\next_wr[0:0]
    43/69: $3\illinsn[0:0]
    44/69: $2\npc[31:0]
    45/69: $2\illinsn[0:0]
    46/69: $1\next_rd[31:0]
    47/69: $1\next_wr[0:0]
    48/69: $1\illinsn[0:0]
    49/69: $1\npc[31:0]
    50/69: $1\mem_rd_func[4:0]
    51/69: $1\mem_rd_reg[4:0]
    52/69: $1\mem_rd_addr[31:0]
    53/69: $1\mem_rd_enable[0:0]
    54/69: $1\mem_wr_strb[3:0]
    55/69: $1\mem_wr_data[31:0]
    56/69: $1\mem_wr_addr[31:0]
    57/69: $1\mem_wr_enable[0:0]
    58/69: $0\illinsn[0:0]
    59/69: $0\next_wr[0:0]
    60/69: $0\npc[31:0]
    61/69: $0\mem_rd_enable[0:0]
    62/69: $0\mem_wr_enable[0:0]
    63/69: $0\next_rd[31:0]
    64/69: $0\mem_rd_func[4:0]
    65/69: $0\mem_rd_reg[4:0]
    66/69: $0\mem_rd_addr[31:0]
    67/69: $0\mem_wr_strb[3:0]
    68/69: $0\mem_wr_data[31:0]
    69/69: $0\mem_wr_addr[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:78$9'.
     1/1: $0\imem_addr_q[31:0]
Creating decoders for process `\nerv.$proc$nerv.sv:55$2'.
     1/3: $0\mem_rd_func_q[4:0]
     2/3: $0\mem_rd_reg_q[4:0]
     3/3: $0\mem_rd_enable_q[0:0]

2.3.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\nerv.\mem_rdata' from process `\nerv.$proc$nerv.sv:338$72'.
No latch inferred for signal `\nerv.\mem_wr_enable' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_wr_addr' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_wr_data' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_wr_strb' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_rd_enable' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_rd_addr' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_rd_reg' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\mem_rd_func' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\npc' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\next_wr' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\next_rd' from process `\nerv.$proc$nerv.sv:168$18'.
No latch inferred for signal `\nerv.\illinsn' from process `\nerv.$proc$nerv.sv:168$18'.

2.3.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\nerv.\pc' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$652' with positive edge clock.
Creating register for signal `\nerv.\trapped' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$653' with positive edge clock.
Creating register for signal `\nerv.\trapped_q' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$654' with positive edge clock.
Creating register for signal `\nerv.\reset_q' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$655' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:360$1_ADDR' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$656' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:360$1_DATA' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$657' with positive edge clock.
Creating register for signal `\nerv.$memwr$\regfile$nerv.sv:360$1_EN' using process `\nerv.$proc$nerv.sv:349$75'.
  created $dff cell `$procdff$658' with positive edge clock.
Creating register for signal `\nerv.\imem_addr_q' using process `\nerv.$proc$nerv.sv:78$9'.
  created $dff cell `$procdff$659' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_enable_q' using process `\nerv.$proc$nerv.sv:55$2'.
  created $dff cell `$procdff$660' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_reg_q' using process `\nerv.$proc$nerv.sv:55$2'.
  created $dff cell `$procdff$661' with positive edge clock.
Creating register for signal `\nerv.\mem_rd_func_q' using process `\nerv.$proc$nerv.sv:55$2'.
  created $dff cell `$procdff$662' with positive edge clock.

2.3.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 4 empty switches in `\nerv.$proc$nerv.sv:349$75'.
Removing empty process `nerv.$proc$nerv.sv:349$75'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:338$72'.
Removing empty process `nerv.$proc$nerv.sv:338$72'.
Found and cleaned up 19 empty switches in `\nerv.$proc$nerv.sv:168$18'.
Removing empty process `nerv.$proc$nerv.sv:168$18'.
Removing empty process `nerv.$proc$nerv.sv:78$9'.
Found and cleaned up 1 empty switch in `\nerv.$proc$nerv.sv:55$2'.
Removing empty process `nerv.$proc$nerv.sv:55$2'.
Cleaned up 25 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~32 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 141 unused wires.
<suppressed ~3 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~528 debug messages>
Removed a total of 176 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$266.
    dead port 2/2 on $mux $procmux$274.
    dead port 2/2 on $mux $procmux$282.
    dead port 2/2 on $mux $procmux$290.
    dead port 2/2 on $mux $procmux$299.
    dead port 2/2 on $mux $procmux$258.
    dead port 2/2 on $mux $procmux$308.
    dead port 2/2 on $mux $procmux$317.
    dead port 2/2 on $mux $procmux$162.
    dead port 2/2 on $mux $procmux$326.
    dead port 2/2 on $mux $procmux$335.
    dead port 2/2 on $mux $procmux$345.
    dead port 2/2 on $mux $procmux$355.
    dead port 2/2 on $mux $procmux$366.
    dead port 2/2 on $mux $procmux$368.
    dead port 2/2 on $mux $procmux$380.
    dead port 2/2 on $mux $procmux$382.
    dead port 2/2 on $mux $procmux$177.
    dead port 2/2 on $mux $procmux$395.
    dead port 2/2 on $mux $procmux$397.
    dead port 2/2 on $mux $procmux$411.
    dead port 2/2 on $mux $procmux$413.
    dead port 2/2 on $mux $procmux$428.
    dead port 2/2 on $mux $procmux$430.
    dead port 2/2 on $mux $procmux$446.
    dead port 2/2 on $mux $procmux$448.
    dead port 2/2 on $mux $procmux$192.
    dead port 2/2 on $mux $procmux$478.
    dead port 2/2 on $mux $procmux$489.
    dead port 2/2 on $mux $procmux$500.
    dead port 2/2 on $mux $procmux$207.
    dead port 2/2 on $mux $procmux$522.
    dead port 2/2 on $mux $procmux$533.
    dead port 2/2 on $mux $procmux$544.
    dead port 2/2 on $mux $procmux$556.
    dead port 2/2 on $mux $procmux$568.
    dead port 2/2 on $mux $procmux$222.
    dead port 2/2 on $mux $procmux$237.
Removed 38 multiplexer ports.
<suppressed ~23 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$298_ANY: { $procmux$203_CMP $procmux$206_CMP $procmux$298_CMP [1] $procmux$298_CMP [2] $procmux$298_CMP [4] }
    New input vector for $reduce_or cell $procmux$257_ANY: { $procmux$206_CMP $procmux$249_CMP [1] $procmux$249_CMP [2] }
    New ctrl vector for $pmux cell $procmux$166: $auto$opt_reduce.cc:132:opt_mux$664
    New ctrl vector for $pmux cell $procmux$181: $auto$opt_reduce.cc:132:opt_mux$666
    New ctrl vector for $pmux cell $procmux$471: $auto$opt_reduce.cc:132:opt_mux$668
    New ctrl vector for $pmux cell $procmux$212: $auto$opt_reduce.cc:132:opt_mux$670
    New ctrl vector for $pmux cell $procmux$579: { $auto$opt_reduce.cc:132:opt_mux$672 $procmux$490_CMP $procmux$208_CMP $procmux$163_CMP }
    New ctrl vector for $pmux cell $procmux$227: $auto$opt_reduce.cc:132:opt_mux$674
    New ctrl vector for $pmux cell $procmux$587: { $auto$opt_reduce.cc:132:opt_mux$676 $procmux$557_CMP $procmux$490_CMP $procmux$346_CMP $procmux$300_CMP $procmux$251_CMP $procmux$208_CMP $procmux$163_CMP }
    Consolidated identical input bits for $mux cell $procmux$91:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$procmux$91_Y
      New ports: A=1'0, B=1'1, Y=$procmux$91_Y [0]
      New connections: $procmux$91_Y [31:1] = { $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] $procmux$91_Y [0] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$663: { $procmux$152_CMP $procmux$153_CMP $procmux$154_CMP $procmux$155_CMP $procmux$156_CMP $procmux$157_CMP $procmux$158_CMP $procmux$159_CMP $procmux$160_CMP $procmux$161_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$665: { $procmux$152_CMP $procmux$153_CMP $procmux$154_CMP $procmux$155_CMP $procmux$156_CMP $procmux$157_CMP $procmux$158_CMP $procmux$159_CMP $procmux$160_CMP $procmux$161_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$667: { $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$206_CMP $procmux$246_CMP $procmux$396_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$669: { $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP $procmux$206_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$671: { $procmux$557_CMP $procmux$576_CMP $procmux$577_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$673: { $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP $procmux$206_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$675: { $procmux$576_CMP $procmux$577_CMP }
  Optimizing cells in module \nerv.
    Consolidated identical input bits for $mux cell $procmux$93:
      Old ports: A=0, B=$procmux$91_Y, Y=$0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78
      New ports: A=1'0, B=$procmux$91_Y [0], Y=$0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0]
      New connections: $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [31:1] = { $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] $0$memwr$\regfile$nerv.sv:360$1_EN[31:0]$78 [0] }
  Optimizing cells in module \nerv.
Performed a total of 18 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 187 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~23 debug messages>

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.10.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed cell nerv.$ternary$nerv.sv:66$4 ($mux).
Removed cell nerv.$ternary$nerv.sv:67$6 ($mux).
Removed cell nerv.$ternary$nerv.sv:68$8 ($mux).
Removed top 29 bits (of 32) from port B of cell nerv.$add$nerv.sv:170$19 ($add).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:204$24 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:219$29 ($and).
Removed top 30 bits (of 32) from port B of cell nerv.$and$nerv.sv:235$44 ($and).
Removed top 27 bits (of 32) from port B of cell nerv.$shl$nerv.sv:272$50 ($shl).
Removed top 20 bits (of 32) from port B of cell nerv.$lt$nerv.sv:284$53 ($lt).
Removed top 27 bits (of 32) from port B of cell nerv.$shr$nerv.sv:339$74 ($shr).
Removed top 29 bits (of 32) from mux cell nerv.$ternary$nerv.sv:367$88 ($mux).
Removed top 31 bits (of 32) from port A of cell nerv.$sub$nerv.sv:367$89 ($sub).
Removed top 29 bits (of 32) from port B of cell nerv.$sub$nerv.sv:367$89 ($sub).
Removed cell nerv.$procmux$95 ($mux).
Removed cell nerv.$procmux$97 ($mux).
Removed cell nerv.$procmux$99 ($mux).
Removed cell nerv.$procmux$101 ($mux).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$117_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$153_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$152_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$154_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$155_CMP0 ($eq).
Removed top 7 bits (of 10) from port B of cell nerv.$procmux$156_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$157_CMP0 ($eq).
Removed top 8 bits (of 10) from port B of cell nerv.$procmux$158_CMP0 ($eq).
Removed top 9 bits (of 10) from port B of cell nerv.$procmux$159_CMP0 ($eq).
Removed top 1 bits (of 10) from port B of cell nerv.$procmux$160_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$163_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$204_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell nerv.$procmux$205_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$208_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$249_CMP1 ($eq).
Removed top 2 bits (of 3) from port B of cell nerv.$procmux$246_CMP0 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$249_CMP2 ($eq).
Removed cell nerv.$procmux$248 ($mux).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$251_CMP0 ($eq).
Removed cell nerv.$procmux$250 ($mux).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$256 ($mux).
Removed cell nerv.$procmux$264 ($mux).
Removed cell nerv.$procmux$272 ($mux).
Removed top 2 bits (of 4) from port B of cell nerv.$procmux$298_CMP1 ($eq).
Removed top 1 bits (of 5) from port B of cell nerv.$procmux$298_CMP2 ($eq).
Removed top 30 bits (of 32) from mux cell nerv.$procmux$297 ($mux).
Removed top 5 bits (of 7) from port B of cell nerv.$procmux$300_CMP0 ($eq).
Removed cell nerv.$procmux$306 ($mux).
Removed cell nerv.$procmux$315 ($mux).
Removed cell nerv.$procmux$463 ($mux).
Removed cell nerv.$procmux$511 ($mux).
Removed top 2 bits (of 7) from port B of cell nerv.$procmux$576_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell nerv.$procmux$577_CMP0 ($eq).
Removed cell nerv.$procmux$610 ($mux).
Removed cell nerv.$procmux$616 ($mux).
Removed cell nerv.$procmux$622 ($mux).
Removed cell nerv.$procmux$633 ($mux).
Removed cell nerv.$procmux$638 ($mux).
Removed cell nerv.$procmux$643 ($mux).
Removed top 31 bits (of 32) from FF cell nerv.$procdff$658 ($dff).
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:284$53_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:285$54_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:302$64_Y.
Removed top 31 bits (of 32) from wire nerv.$lt$nerv.sv:303$65_Y.
Removed top 29 bits (of 32) from wire nerv.$ternary$nerv.sv:367$88_Y.

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

2.14. Executing SHARE pass (SAT-based resource sharing).
Found 9 cells in module nerv that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$nerv.sv:306$68 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q }.
    Found 1 candidates: $sshr$nerv.sv:291$60
    Analyzing resource sharing with $sshr$nerv.sv:291$60 ($sshr):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$154_CMP \mem_rd_enable_q }.
      Activation pattern for cell $sshr$nerv.sv:306$68: { $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $sshr$nerv.sv:291$60: { $procmux$208_CMP $procmux$154_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 3 cells, 88 variables, 226 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $sshr$nerv.sv:306$68: $auto$share.cc:976:make_cell_activation_logic$682
      New cell: $auto$share.cc:666:make_supercell$689 ($sshr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$689 ($sshr):
    Found 2 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$154_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shr$nerv.sv:339$74 ($shr):
    Found 5 activation_patterns using ctrl signal { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    Found 2 candidates: $shr$nerv.sv:305$67 $shr$nerv.sv:290$59
    Analyzing resource sharing with $shr$nerv.sv:305$67 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q }.
      Activation pattern for cell $shr$nerv.sv:339$74: { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $shr$nerv.sv:339$74: { $procmux$115_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:339$74: { $procmux$116_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:339$74: { $procmux$117_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:339$74: { $procmux$118_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $shr$nerv.sv:305$67: { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$116_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$117_CMP vs. $procmux$118_CMP
      Size of SAT problem: 6 cells, 149 variables, 406 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv.sv:305$67: $auto$share.cc:976:make_cell_activation_logic$692
      New cell: $auto$share.cc:666:make_supercell$699 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$699 ($shr):
    Found 6 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$155_CMP $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    Found 1 candidates: $shr$nerv.sv:290$59
    Analyzing resource sharing with $shr$nerv.sv:290$59 ($shr):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$155_CMP \mem_rd_enable_q }.
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q } = 5'00001
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$115_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$116_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$117_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$118_CMP \mem_rd_enable_q } = 2'11
      Activation pattern for cell $auto$share.cc:666:make_supercell$699: { $procmux$163_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $shr$nerv.sv:290$59: { $procmux$208_CMP $procmux$155_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$116_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$115_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$117_CMP
      Adding exclusive control bits: $procmux$116_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$117_CMP vs. $procmux$118_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 7 cells, 166 variables, 467 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shr$nerv.sv:290$59: $auto$share.cc:976:make_cell_activation_logic$702
      New cell: $auto$share.cc:666:make_supercell$709 ($shr)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$709 ($shr):
    Found 7 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$155_CMP $procmux$118_CMP $procmux$117_CMP $procmux$116_CMP $procmux$115_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $shl$nerv.sv:301$63 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q }.
    Found 1 candidates: $shl$nerv.sv:289$58
    Analyzing resource sharing with $shl$nerv.sv:289$58 ($shl):
      Found 1 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$159_CMP \mem_rd_enable_q }.
      Activation pattern for cell $shl$nerv.sv:301$63: { $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q } = 3'110
      Activation pattern for cell $shl$nerv.sv:289$58: { $procmux$208_CMP $procmux$159_CMP \mem_rd_enable_q } = 3'110
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Adding exclusive control bits: $procmux$163_CMP vs. $procmux$208_CMP
      Size of SAT problem: 3 cells, 88 variables, 226 clauses
      According to the SAT solver this pair of cells can be shared.
      Activation signal for $shl$nerv.sv:301$63: $auto$share.cc:976:make_cell_activation_logic$712
      New cell: $auto$share.cc:666:make_supercell$719 ($shl)
  Analyzing resource sharing options for $auto$share.cc:666:make_supercell$719 ($shl):
    Found 2 activation_patterns using ctrl signal { $procmux$208_CMP $procmux$163_CMP $procmux$159_CMP \mem_rd_enable_q }.
    No candidates found.
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:88$16 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv.sv:88$15_Y.
    Found 1 candidates: $memrd$\regfile$nerv.sv:87$13
    Analyzing resource sharing with $memrd$\regfile$nerv.sv:87$13 ($memrd):
      Found 1 activation_patterns using ctrl signal $logic_not$nerv.sv:87$12_Y.
      Forbidden control signals for this pair of cells: { $procmux$488_CMP $procmux$344_CMP $procmux$298_CTRL $procmux$249_CTRL $ge$nerv.sv:232$42_Y $lt$nerv.sv:231$40_Y $ge$nerv.sv:230$38_Y $lt$nerv.sv:229$36_Y $ne$nerv.sv:228$34_Y $eq$nerv.sv:227$32_Y \illinsn \mem_wr_enable }
      Activation pattern for cell $memrd$\regfile$nerv.sv:88$16: $logic_not$nerv.sv:88$15_Y = 1'0
      Activation pattern for cell $memrd$\regfile$nerv.sv:87$13: $logic_not$nerv.sv:87$12_Y = 1'0
      Size of SAT problem: 2 cells, 27 variables, 51 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $logic_not$nerv.sv:88$15_Y $logic_not$nerv.sv:87$12_Y } = 2'00
  Analyzing resource sharing options for $memrd$\regfile$nerv.sv:87$13 ($memrd):
    Found 1 activation_patterns using ctrl signal $logic_not$nerv.sv:87$12_Y.
    No candidates found.
Removing 8 cells in module nerv:
  Removing cell $shl$nerv.sv:289$58 ($shl).
  Removing cell $shl$nerv.sv:301$63 ($shl).
  Removing cell $shr$nerv.sv:290$59 ($shr).
  Removing cell $auto$share.cc:666:make_supercell$699 ($shr).
  Removing cell $shr$nerv.sv:305$67 ($shr).
  Removing cell $shr$nerv.sv:339$74 ($shr).
  Removing cell $sshr$nerv.sv:291$60 ($sshr).
  Removing cell $sshr$nerv.sv:306$68 ($sshr).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
Using template $paramod$5b7c8f37cb386acdf3ce7e528c09e6d15eb51b72\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d87a48a4cd82717ae6bd57e6fe5ce90d87c44016\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$5652dda64580ddd7861fd245e644fd33eae2e158\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d31416a5863a8a220e16d7940a75ab70541ab32a\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$77ad031fce233083715243f95e3cd2547d931e42\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$169bae89c32dcc6f3626d16cf9f47ceb469145db\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$4cde4291caf5aa85a196975f3624151774a86d78\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$d0a69964f9ce54b3124cbdb498a7c3bb278370d8\_90_lut_cmp_ for cells of type $eq.
Using template $paramod$dc6060208f0369ff43b26b7eee8e43bf61e4b025\_90_lut_cmp_ for cells of type $eq.
No more expansions possible.
<suppressed ~624 debug messages>

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2 debug messages>

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 61 unused wires.
<suppressed ~9 debug messages>

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module nerv:
  creating $macc model for $add$nerv.sv:170$19 ($add).
  creating $macc model for $add$nerv.sv:197$22 ($add).
  creating $macc model for $add$nerv.sv:203$23 ($add).
  creating $macc model for $add$nerv.sv:215$27 ($add).
  creating $macc model for $add$nerv.sv:227$33 ($add).
  creating $macc model for $add$nerv.sv:259$48 ($add).
  creating $macc model for $add$nerv.sv:299$61 ($add).
  creating $macc model for $sub$nerv.sv:300$62 ($sub).
  creating $macc model for $sub$nerv.sv:367$89 ($sub).
  creating $alu model for $macc $sub$nerv.sv:367$89.
  creating $alu model for $macc $sub$nerv.sv:300$62.
  creating $alu model for $macc $add$nerv.sv:299$61.
  creating $alu model for $macc $add$nerv.sv:259$48.
  creating $alu model for $macc $add$nerv.sv:227$33.
  creating $alu model for $macc $add$nerv.sv:215$27.
  creating $alu model for $macc $add$nerv.sv:203$23.
  creating $alu model for $macc $add$nerv.sv:197$22.
  creating $alu model for $macc $add$nerv.sv:170$19.
  creating $alu model for $ge$nerv.sv:230$38 ($ge): new $alu
  creating $alu model for $ge$nerv.sv:232$42 ($ge): new $alu
  creating $alu model for $lt$nerv.sv:229$36 ($lt): merged with $ge$nerv.sv:230$38.
  creating $alu model for $lt$nerv.sv:231$40 ($lt): merged with $ge$nerv.sv:232$42.
  creating $alu model for $lt$nerv.sv:284$53 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:285$54 ($lt): new $alu
  creating $alu model for $lt$nerv.sv:302$64 ($lt): merged with $ge$nerv.sv:230$38.
  creating $alu model for $lt$nerv.sv:303$65 ($lt): merged with $ge$nerv.sv:232$42.
  creating $alu model for $eq$nerv.sv:227$32 ($eq): merged with $ge$nerv.sv:232$42.
  creating $alu model for $ne$nerv.sv:228$34 ($ne): merged with $ge$nerv.sv:232$42.
  creating $alu cell for $lt$nerv.sv:284$53: $auto$alumacc.cc:474:replace_alu$752
  creating $alu cell for $add$nerv.sv:170$19: $auto$alumacc.cc:474:replace_alu$765
  creating $alu cell for $add$nerv.sv:197$22: $auto$alumacc.cc:474:replace_alu$768
  creating $alu cell for $add$nerv.sv:203$23: $auto$alumacc.cc:474:replace_alu$771
  creating $alu cell for $lt$nerv.sv:285$54: $auto$alumacc.cc:474:replace_alu$774
  creating $alu cell for $add$nerv.sv:215$27: $auto$alumacc.cc:474:replace_alu$779
  creating $alu cell for $add$nerv.sv:227$33: $auto$alumacc.cc:474:replace_alu$782
  creating $alu cell for $add$nerv.sv:259$48: $auto$alumacc.cc:474:replace_alu$785
  creating $alu cell for $ge$nerv.sv:232$42, $lt$nerv.sv:231$40, $lt$nerv.sv:303$65, $eq$nerv.sv:227$32, $ne$nerv.sv:228$34: $auto$alumacc.cc:474:replace_alu$788
  creating $alu cell for $ge$nerv.sv:230$38, $lt$nerv.sv:229$36, $lt$nerv.sv:302$64: $auto$alumacc.cc:474:replace_alu$803
  creating $alu cell for $add$nerv.sv:299$61: $auto$alumacc.cc:474:replace_alu$818
  creating $alu cell for $sub$nerv.sv:300$62: $auto$alumacc.cc:474:replace_alu$821
  creating $alu cell for $sub$nerv.sv:367$89: $auto$alumacc.cc:474:replace_alu$824
  created 13 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~3 debug messages>

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $auto$alumacc.cc:509:replace_alu$795: { $auto$rtlil.cc:1832:Not$792 $auto$rtlil.cc:1835:ReduceAnd$794 }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$793: { $auto$alumacc.cc:490:replace_alu$789 [0] $auto$alumacc.cc:490:replace_alu$789 [1] $auto$alumacc.cc:490:replace_alu$789 [2] $auto$alumacc.cc:490:replace_alu$789 [3] $auto$alumacc.cc:490:replace_alu$789 [4] $auto$alumacc.cc:490:replace_alu$789 [5] $auto$alumacc.cc:490:replace_alu$789 [6] $auto$alumacc.cc:490:replace_alu$789 [7] $auto$alumacc.cc:490:replace_alu$789 [8] $auto$alumacc.cc:490:replace_alu$789 [9] $auto$alumacc.cc:490:replace_alu$789 [10] $auto$alumacc.cc:490:replace_alu$789 [11] $auto$alumacc.cc:490:replace_alu$789 [12] $auto$alumacc.cc:490:replace_alu$789 [13] $auto$alumacc.cc:490:replace_alu$789 [14] $auto$alumacc.cc:490:replace_alu$789 [15] $auto$alumacc.cc:490:replace_alu$789 [16] $auto$alumacc.cc:490:replace_alu$789 [17] $auto$alumacc.cc:490:replace_alu$789 [18] $auto$alumacc.cc:490:replace_alu$789 [19] $auto$alumacc.cc:490:replace_alu$789 [20] $auto$alumacc.cc:490:replace_alu$789 [21] $auto$alumacc.cc:490:replace_alu$789 [22] $auto$alumacc.cc:490:replace_alu$789 [23] $auto$alumacc.cc:490:replace_alu$789 [24] $auto$alumacc.cc:490:replace_alu$789 [25] $auto$alumacc.cc:490:replace_alu$789 [26] $auto$alumacc.cc:490:replace_alu$789 [27] $auto$alumacc.cc:490:replace_alu$789 [28] $auto$alumacc.cc:490:replace_alu$789 [29] $auto$alumacc.cc:490:replace_alu$789 [30] $auto$alumacc.cc:490:replace_alu$789 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$755: { $auto$alumacc.cc:490:replace_alu$753 [0] $auto$alumacc.cc:490:replace_alu$753 [1] $auto$alumacc.cc:490:replace_alu$753 [2] $auto$alumacc.cc:490:replace_alu$753 [3] $auto$alumacc.cc:490:replace_alu$753 [4] $auto$alumacc.cc:490:replace_alu$753 [5] $auto$alumacc.cc:490:replace_alu$753 [6] $auto$alumacc.cc:490:replace_alu$753 [7] $auto$alumacc.cc:490:replace_alu$753 [8] $auto$alumacc.cc:490:replace_alu$753 [9] $auto$alumacc.cc:490:replace_alu$753 [10] $auto$alumacc.cc:490:replace_alu$753 [11] $auto$alumacc.cc:490:replace_alu$753 [12] $auto$alumacc.cc:490:replace_alu$753 [13] $auto$alumacc.cc:490:replace_alu$753 [14] $auto$alumacc.cc:490:replace_alu$753 [15] $auto$alumacc.cc:490:replace_alu$753 [16] $auto$alumacc.cc:490:replace_alu$753 [17] $auto$alumacc.cc:490:replace_alu$753 [18] $auto$alumacc.cc:490:replace_alu$753 [19] $auto$alumacc.cc:490:replace_alu$753 [20] $auto$alumacc.cc:490:replace_alu$753 [21] $auto$alumacc.cc:490:replace_alu$753 [22] $auto$alumacc.cc:490:replace_alu$753 [23] $auto$alumacc.cc:490:replace_alu$753 [24] $auto$alumacc.cc:490:replace_alu$753 [25] $auto$alumacc.cc:490:replace_alu$753 [26] $auto$alumacc.cc:490:replace_alu$753 [27] $auto$alumacc.cc:490:replace_alu$753 [28] $auto$alumacc.cc:490:replace_alu$753 [29] $auto$alumacc.cc:490:replace_alu$753 [30] $auto$alumacc.cc:490:replace_alu$753 [31] }
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$810: { $auto$alumacc.cc:490:replace_alu$804 [0] $auto$alumacc.cc:490:replace_alu$804 [1] $auto$alumacc.cc:490:replace_alu$804 [2] $auto$alumacc.cc:490:replace_alu$804 [3] $auto$alumacc.cc:490:replace_alu$804 [4] $auto$alumacc.cc:490:replace_alu$804 [5] $auto$alumacc.cc:490:replace_alu$804 [6] $auto$alumacc.cc:490:replace_alu$804 [7] $auto$alumacc.cc:490:replace_alu$804 [8] $auto$alumacc.cc:490:replace_alu$804 [9] $auto$alumacc.cc:490:replace_alu$804 [10] $auto$alumacc.cc:490:replace_alu$804 [11] $auto$alumacc.cc:490:replace_alu$804 [12] $auto$alumacc.cc:490:replace_alu$804 [13] $auto$alumacc.cc:490:replace_alu$804 [14] $auto$alumacc.cc:490:replace_alu$804 [15] $auto$alumacc.cc:490:replace_alu$804 [16] $auto$alumacc.cc:490:replace_alu$804 [17] $auto$alumacc.cc:490:replace_alu$804 [18] $auto$alumacc.cc:490:replace_alu$804 [19] $auto$alumacc.cc:490:replace_alu$804 [20] $auto$alumacc.cc:490:replace_alu$804 [21] $auto$alumacc.cc:490:replace_alu$804 [22] $auto$alumacc.cc:490:replace_alu$804 [23] $auto$alumacc.cc:490:replace_alu$804 [24] $auto$alumacc.cc:490:replace_alu$804 [25] $auto$alumacc.cc:490:replace_alu$804 [26] $auto$alumacc.cc:490:replace_alu$804 [27] $auto$alumacc.cc:490:replace_alu$804 [28] $auto$alumacc.cc:490:replace_alu$804 [29] $auto$alumacc.cc:490:replace_alu$804 [30] $auto$alumacc.cc:490:replace_alu$804 [31] }
  Optimizing cells in module \nerv.
Performed a total of 4 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 11 unused wires.
<suppressed ~2 debug messages>

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.9. Rerunning OPT passes. (Maybe there is more to do..)

2.19.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~24 debug messages>

2.19.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.19.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.19.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.19.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.19.16. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).
Checking cell `$memwr$\regfile$nerv.sv:360$90' in module `\nerv': merged $dff to cell.
Checking cell `$memrd$\regfile$nerv.sv:87$13' in module `\nerv': no (compatible) $dff found.
Checking cell `$memrd$\regfile$nerv.sv:88$16' in module `\nerv': no (compatible) $dff found.

2.22.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 5 unused cells and 5 unused wires.
<suppressed ~6 debug messages>

2.22.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.22.5. Executing MEMORY_COLLECT pass (generating $mem cells).
Collecting $memrd, $memwr and $meminit for memory `\regfile' in module `\nerv':
  $memwr$\regfile$nerv.sv:360$90 ($memwr)
  $memrd$\regfile$nerv.sv:87$13 ($memrd)
  $memrd$\regfile$nerv.sv:88$16 ($memrd)

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).
Processing nerv.regfile:
  Properties: ports=3 bits=1024 rports=2 wports=1 dbits=32 abits=5 words=32
  Checking rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1):
    Bram geometry: abits=8 dbits=16 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M0: awaste=224 dwaste=0 bwaste=3584 waste=3584 efficiency=12
    Rule #1 for bram type $__ICE40_RAM4K_M0 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M0 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M0 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1):
    Bram geometry: abits=9 dbits=8 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=480 dwaste=0 bwaste=3840 waste=3840 efficiency=6
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 1) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 1):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2):
    Bram geometry: abits=10 dbits=4 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=992 dwaste=0 bwaste=3968 waste=3968 efficiency=3
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 2) accepted.
    Mapping to bram type $__ICE40_RAM4K_M123 (variant 2):
      Write port #0 is in clock domain \clock.
        Mapped to bram port B1.
      Read port #0 is in clock domain !~async~.
        Bram port A1.1 has incompatible clock type.
        Failed to map read port #0.
    Mapping to bram type $__ICE40_RAM4K_M123 failed.
  Checking rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3):
    Bram geometry: abits=11 dbits=2 wports=0 rports=0
    Estimated number of duplicates for more read ports: dups=1
    Metrics for $__ICE40_RAM4K_M123: awaste=2016 dwaste=0 bwaste=4032 waste=4032 efficiency=1
    Rule #2 for bram type $__ICE40_RAM4K_M123 (variant 3) rejected: requirement 'min efficiency 2' not met.
  No acceptable bram resources found.

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~52 debug messages>

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 28 unused wires.
<suppressed ~1 debug messages>

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).
Mapping memory cell \regfile in module \nerv:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~10 debug messages>

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
    New input vector for $reduce_or cell $procmux$298_ANY: { $2\next_wr[0:0] $procmux$203_CMP $procmux$298_CMP [1] $procmux$298_CMP [2] $procmux$298_CMP [4] }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$673: { $2\next_wr[0:0] $procmux$154_CMP $procmux$155_CMP $procmux$159_CMP $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$204_CMP $procmux$205_CMP }
    New input vector for $reduce_or cell $auto$opt_reduce.cc:126:opt_mux$667: { $2\next_wr[0:0] $procmux$201_CMP $procmux$202_CMP $procmux$203_CMP $procmux$246_CMP $procmux$396_CMP }
    Consolidated identical input bits for $pmux cell $procmux$114:
      Old ports: A=$auto$share.cc:662:make_supercell$698, B={ $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7:0] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15:0] 24'000000000000000000000000 $auto$share.cc:662:make_supercell$698 [7:0] 16'0000000000000000 $auto$share.cc:662:make_supercell$698 [15:0] }, Y=\mem_rdata
      New ports: A=$auto$share.cc:662:make_supercell$698 [31:8], B={ $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [7] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15] $auto$share.cc:662:make_supercell$698 [15:8] 40'0000000000000000000000000000000000000000 $auto$share.cc:662:make_supercell$698 [15:8] }, Y=\mem_rdata [31:8]
      New connections: \mem_rdata [7:0] = $auto$share.cc:662:make_supercell$698 [7:0]
    Consolidated identical input bits for $pmux cell $procmux$245:
      Old ports: A=4'1111, B=8'00010011, Y=$3\mem_wr_strb[3:0]
      New ports: A=2'11, B=4'0001, Y=$3\mem_wr_strb[3:0] [2:1]
      New connections: { $3\mem_wr_strb[3:0] [3] $3\mem_wr_strb[3:0] [0] } = { $3\mem_wr_strb[3:0] [2] 1'1 }
    Consolidated identical input bits for $mux cell $procmux$343:
      Old ports: A=$5\npc[31:0], B={ $5\npc[31:0] [31:2] 2'00 }, Y=$12\npc[31:0]
      New ports: A=$5\npc[31:0] [1:0], B=2'00, Y=$12\npc[31:0] [1:0]
      New connections: $12\npc[31:0] [31:2] = $5\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$487:
      Old ports: A=$3\npc[31:0], B={ $3\npc[31:0] [31:2] 2'00 }, Y=$4\npc[31:0]
      New ports: A=$3\npc[31:0] [1:0], B=2'00, Y=$4\npc[31:0] [1:0]
      New connections: $4\npc[31:0] [31:2] = $3\npc[31:0] [31:2]
    Consolidated identical input bits for $mux cell $procmux$554:
      Old ports: A=$add$nerv.sv:203$23_Y, B={ $add$nerv.sv:203$23_Y [31:2] 2'00 }, Y=$2\npc[31:0]
      New ports: A=$add$nerv.sv:203$23_Y [1:0], B=2'00, Y=$2\npc[31:0] [1:0]
      New connections: $2\npc[31:0] [31:2] = $add$nerv.sv:203$23_Y [31:2]
    Consolidated identical input bits for $mux cell $ternary$nerv.sv:367$88:
      Old ports: A=3'000, B=3'100, Y=$auto$wreduce.cc:455:run$681 [2:0]
      New ports: A=1'0, B=1'1, Y=$auto$wreduce.cc:455:run$681 [2]
      New connections: $auto$wreduce.cc:455:run$681 [1:0] = 2'00
  Optimizing cells in module \nerv.
Performed a total of 9 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.9. Rerunning OPT passes. (Maybe there is more to do..)

2.29.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \nerv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~56 debug messages>

2.29.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \nerv.
Performed a total of 0 changes.

2.29.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.29.13. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.29.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.29.16. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $logic_or.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$770435fdf938ca78b5f1ecab2552fff9f675f686\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=3\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_bool.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod$constmap:02ee4fad4c1ffc2bbdc3e6fbc37bedbf9185352a$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=2 for cells of type $pmux.
Using template $paramod$constmap:6e3026a439ed4a6e7983ca0e910890cc59b2f7b2$paramod$639848c0e6c2f57a2478574ca6c566bbce1f0807\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$943af4e63d02cf420cf82d17400bd04ea07088b0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_90_pmux\WIDTH=24\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Analyzing pattern of constant bits for this cell:
Creating constmapped module `$paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr'.

2.30.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~1637 debug messages>

2.30.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr.
<suppressed ~192 debug messages>
Removed 0 unused cells and 10 unused wires.
Using template $paramod$constmap:4621fcf06a436d1e2a4080e2ed9866a7d07a6e07$paramod$887c9fe2c55be14c90171bd2ff359c086a0858d7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=10 for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $lut.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=9 for cells of type $pmux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=1\B_SIGNED=1\A_WIDTH=12\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=6 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=4 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=1\S_WIDTH=8 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=32\S_WIDTH=3 for cells of type $pmux.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~674 debug messages>

2.31. Executing ICE40_OPT pass (performing simple optimizations).

2.31.1. Running ICE40 specific optimizations.

2.31.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~1248 debug messages>

2.31.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~2343 debug messages>
Removed a total of 781 cells.

2.31.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 306 unused cells and 1041 unused wires.
<suppressed ~307 debug messages>

2.31.6. Rerunning OPT passes. (Removed registers in this run.)

2.31.7. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$771.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$782.slice[0].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[0].carry: CO=1'1
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[10].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [10]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[11].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [11]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[12].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [12]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[13].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [13]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[14].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [14]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[15].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [15]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[16].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [16]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[17].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [17]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[18].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [18]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[19].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [19]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[1].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [1]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[20].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [20]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[21].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [21]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[22].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [22]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[23].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [23]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[24].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [24]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[25].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [25]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[26].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [26]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[27].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [27]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[28].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [28]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[29].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [29]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[30].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [30]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[3].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [3]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[4].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [4]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[5].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [5]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[6].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [6]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[7].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [7]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[8].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [8]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[9].carry: CO=$auto$alumacc.cc:474:replace_alu$824.C [9]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$771.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$782.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[0].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[10].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[11].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[12].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[13].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[14].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[15].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[16].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[17].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[18].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[19].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[1].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[20].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[21].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[22].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[23].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[24].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[25].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[26].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[27].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[28].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[29].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[30].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[31].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[4].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[5].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[6].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[7].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[8].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[9].adder back to logic.

2.31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~487 debug messages>

2.31.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~102 debug messages>
Removed a total of 34 cells.

2.31.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 2 unused cells and 138 unused wires.
<suppressed ~3 debug messages>

2.31.12. Rerunning OPT passes. (Removed registers in this run.)

2.31.13. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[1].carry: CO=1'0
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[2].carry: CO=$auto$alumacc.cc:474:replace_alu$824.BB [2]
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[2].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$824.slice[3].adder back to logic.

2.31.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~44 debug messages>

2.31.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.16. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 15 unused wires.
<suppressed ~1 debug messages>

2.31.18. Rerunning OPT passes. (Removed registers in this run.)

2.31.19. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[2].carry: CO=\pc [2]
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[2].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$765.slice[3].adder back to logic.
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[3].adder back to logic.

2.31.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~26 debug messages>

2.31.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

2.31.22. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

2.31.24. Rerunning OPT passes. (Removed registers in this run.)

2.31.25. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[3].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[4].adder back to logic.

2.31.26. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.27. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.28. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.30. Rerunning OPT passes. (Removed registers in this run.)

2.31.31. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[4].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[5].adder back to logic.

2.31.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.34. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.36. Rerunning OPT passes. (Removed registers in this run.)

2.31.37. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[5].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[6].adder back to logic.

2.31.38. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.40. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.41. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.42. Rerunning OPT passes. (Removed registers in this run.)

2.31.43. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[6].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[7].adder back to logic.

2.31.44. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.45. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.46. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.48. Rerunning OPT passes. (Removed registers in this run.)

2.31.49. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[7].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[8].adder back to logic.

2.31.50. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.51. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.52. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.53. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.54. Rerunning OPT passes. (Removed registers in this run.)

2.31.55. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[8].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[9].adder back to logic.

2.31.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.57. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.58. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.60. Rerunning OPT passes. (Removed registers in this run.)

2.31.61. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[9].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[10].adder back to logic.

2.31.62. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.63. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.64. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.66. Rerunning OPT passes. (Removed registers in this run.)

2.31.67. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[10].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[11].adder back to logic.

2.31.68. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~13 debug messages>

2.31.69. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.70. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.71. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 4 unused wires.
<suppressed ~2 debug messages>

2.31.72. Rerunning OPT passes. (Removed registers in this run.)

2.31.73. Running ICE40 specific optimizations.
Optimized away SB_CARRY cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[11].carry: CO=1'0
Mapping SB_LUT4 cell nerv.$auto$alumacc.cc:474:replace_alu$768.slice[12].adder back to logic.

2.31.74. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~11 debug messages>

2.31.75. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.31.76. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.77. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

2.31.78. Rerunning OPT passes. (Removed registers in this run.)

2.31.79. Running ICE40 specific optimizations.

2.31.80. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.31.81. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.31.82. Executing OPT_RMDFF pass (remove dff with constant values).

2.31.83. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.31.84. Finished OPT passes. (There is nothing left to do.)

2.32. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.33. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module nerv:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2006 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [0] -> \regfile[4] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2007 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [1] -> \regfile[4] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2008 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [2] -> \regfile[4] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2009 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [3] -> \regfile[4] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2010 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [4] -> \regfile[4] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2011 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [5] -> \regfile[4] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2012 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [6] -> \regfile[4] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2013 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [7] -> \regfile[4] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2014 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [8] -> \regfile[4] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2015 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [9] -> \regfile[4] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2016 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [10] -> \regfile[4] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2017 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [11] -> \regfile[4] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2018 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [12] -> \regfile[4] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2019 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [13] -> \regfile[4] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2020 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [14] -> \regfile[4] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2021 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [15] -> \regfile[4] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2022 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [16] -> \regfile[4] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2023 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [17] -> \regfile[4] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2024 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [18] -> \regfile[4] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2025 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [19] -> \regfile[4] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2026 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [20] -> \regfile[4] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2027 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [21] -> \regfile[4] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2028 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [22] -> \regfile[4] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2029 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [23] -> \regfile[4] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2030 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [24] -> \regfile[4] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2031 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [25] -> \regfile[4] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2032 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [26] -> \regfile[4] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2033 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [27] -> \regfile[4] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2034 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [28] -> \regfile[4] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2035 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [29] -> \regfile[4] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2036 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [30] -> \regfile[4] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2037 to $_DFFE_PP_ for $memory\regfile$wrmux[4][0][0]$y$1165 [31] -> \regfile[4] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2039 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [0] -> \regfile[10] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2040 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [1] -> \regfile[10] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2041 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [2] -> \regfile[10] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2042 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [3] -> \regfile[10] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2043 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [4] -> \regfile[10] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2044 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [5] -> \regfile[10] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2045 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [6] -> \regfile[10] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2046 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [7] -> \regfile[10] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2047 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [8] -> \regfile[10] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2048 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [9] -> \regfile[10] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2049 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [10] -> \regfile[10] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2050 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [11] -> \regfile[10] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2051 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [12] -> \regfile[10] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2052 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [13] -> \regfile[10] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2053 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [14] -> \regfile[10] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2054 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [15] -> \regfile[10] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2055 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [16] -> \regfile[10] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2056 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [17] -> \regfile[10] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2057 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [18] -> \regfile[10] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2058 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [19] -> \regfile[10] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2059 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [20] -> \regfile[10] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2060 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [21] -> \regfile[10] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2061 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [22] -> \regfile[10] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2062 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [23] -> \regfile[10] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2063 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [24] -> \regfile[10] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2064 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [25] -> \regfile[10] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2065 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [26] -> \regfile[10] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2066 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [27] -> \regfile[10] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2067 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [28] -> \regfile[10] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2068 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [29] -> \regfile[10] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2069 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [30] -> \regfile[10] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2070 to $_DFFE_PP_ for $memory\regfile$wrmux[10][0][0]$y$1207 [31] -> \regfile[10] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2282 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [0] -> \regfile[20] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2283 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [1] -> \regfile[20] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2284 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [2] -> \regfile[20] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2285 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [3] -> \regfile[20] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2286 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [4] -> \regfile[20] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2287 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [5] -> \regfile[20] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2288 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [6] -> \regfile[20] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2289 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [7] -> \regfile[20] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2290 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [8] -> \regfile[20] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2291 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [9] -> \regfile[20] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2292 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [10] -> \regfile[20] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2293 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [11] -> \regfile[20] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2294 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [12] -> \regfile[20] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2295 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [13] -> \regfile[20] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2296 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [14] -> \regfile[20] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2297 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [15] -> \regfile[20] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2298 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [16] -> \regfile[20] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2299 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [17] -> \regfile[20] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2300 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [18] -> \regfile[20] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2301 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [19] -> \regfile[20] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2302 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [20] -> \regfile[20] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2303 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [21] -> \regfile[20] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2304 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [22] -> \regfile[20] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2305 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [23] -> \regfile[20] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2306 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [24] -> \regfile[20] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2307 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [25] -> \regfile[20] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2308 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [26] -> \regfile[20] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2309 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [27] -> \regfile[20] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2310 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [28] -> \regfile[20] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2311 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [29] -> \regfile[20] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2312 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [30] -> \regfile[20] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2313 to $_DFFE_PP_ for $memory\regfile$wrmux[20][0][0]$y$1277 [31] -> \regfile[20] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2317 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [0] -> \regfile[6] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2318 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [1] -> \regfile[6] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2319 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [2] -> \regfile[6] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2320 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [3] -> \regfile[6] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2321 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [4] -> \regfile[6] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2322 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [5] -> \regfile[6] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2323 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [6] -> \regfile[6] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2324 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [7] -> \regfile[6] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2325 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [8] -> \regfile[6] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2326 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [9] -> \regfile[6] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2327 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [10] -> \regfile[6] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2328 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [11] -> \regfile[6] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2329 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [12] -> \regfile[6] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2330 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [13] -> \regfile[6] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2331 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [14] -> \regfile[6] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2332 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [15] -> \regfile[6] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2333 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [16] -> \regfile[6] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2334 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [17] -> \regfile[6] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2335 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [18] -> \regfile[6] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2336 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [19] -> \regfile[6] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2337 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [20] -> \regfile[6] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2338 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [21] -> \regfile[6] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2339 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [22] -> \regfile[6] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2340 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [23] -> \regfile[6] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2341 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [24] -> \regfile[6] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2342 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [25] -> \regfile[6] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2343 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [26] -> \regfile[6] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2344 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [27] -> \regfile[6] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2345 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [28] -> \regfile[6] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2346 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [29] -> \regfile[6] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2347 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [30] -> \regfile[6] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2348 to $_DFFE_PP_ for $memory\regfile$wrmux[6][0][0]$y$1177 [31] -> \regfile[6] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2350 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [0] -> \regfile[19] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2351 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [1] -> \regfile[19] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2352 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [2] -> \regfile[19] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2353 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [3] -> \regfile[19] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2354 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [4] -> \regfile[19] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2355 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [5] -> \regfile[19] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2356 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [6] -> \regfile[19] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2357 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [7] -> \regfile[19] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2358 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [8] -> \regfile[19] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2359 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [9] -> \regfile[19] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2360 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [10] -> \regfile[19] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2361 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [11] -> \regfile[19] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2362 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [12] -> \regfile[19] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2363 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [13] -> \regfile[19] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2364 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [14] -> \regfile[19] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2365 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [15] -> \regfile[19] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2366 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [16] -> \regfile[19] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2367 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [17] -> \regfile[19] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2368 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [18] -> \regfile[19] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2369 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [19] -> \regfile[19] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2370 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [20] -> \regfile[19] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2371 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [21] -> \regfile[19] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2372 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [22] -> \regfile[19] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2373 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [23] -> \regfile[19] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2374 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [24] -> \regfile[19] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2375 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [25] -> \regfile[19] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2376 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [26] -> \regfile[19] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2377 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [27] -> \regfile[19] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2378 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [28] -> \regfile[19] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2379 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [29] -> \regfile[19] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2380 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [30] -> \regfile[19] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2381 to $_DFFE_PP_ for $memory\regfile$wrmux[19][0][0]$y$1269 [31] -> \regfile[19] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2389 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [0] -> \regfile[3] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2390 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [1] -> \regfile[3] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2391 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [2] -> \regfile[3] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2392 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [3] -> \regfile[3] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2393 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [4] -> \regfile[3] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2394 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [5] -> \regfile[3] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2395 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [6] -> \regfile[3] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2396 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [7] -> \regfile[3] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2397 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [8] -> \regfile[3] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2398 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [9] -> \regfile[3] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2399 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [10] -> \regfile[3] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2400 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [11] -> \regfile[3] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2401 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [12] -> \regfile[3] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2402 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [13] -> \regfile[3] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2403 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [14] -> \regfile[3] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2404 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [15] -> \regfile[3] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2405 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [16] -> \regfile[3] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2406 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [17] -> \regfile[3] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2407 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [18] -> \regfile[3] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2408 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [19] -> \regfile[3] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2409 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [20] -> \regfile[3] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2410 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [21] -> \regfile[3] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2411 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [22] -> \regfile[3] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2412 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [23] -> \regfile[3] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2413 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [24] -> \regfile[3] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2414 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [25] -> \regfile[3] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2415 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [26] -> \regfile[3] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2416 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [27] -> \regfile[3] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2417 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [28] -> \regfile[3] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2418 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [29] -> \regfile[3] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2419 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [30] -> \regfile[3] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2420 to $_DFFE_PP_ for $memory\regfile$wrmux[3][0][0]$y$1155 [31] -> \regfile[3] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2421 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [0] -> \regfile[2] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2422 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [1] -> \regfile[2] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2423 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [2] -> \regfile[2] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2424 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [3] -> \regfile[2] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2425 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [4] -> \regfile[2] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2426 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [5] -> \regfile[2] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2427 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [6] -> \regfile[2] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2428 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [7] -> \regfile[2] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2429 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [8] -> \regfile[2] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2430 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [9] -> \regfile[2] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2431 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [10] -> \regfile[2] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2432 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [11] -> \regfile[2] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2433 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [12] -> \regfile[2] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2434 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [13] -> \regfile[2] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2435 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [14] -> \regfile[2] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2436 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [15] -> \regfile[2] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2437 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [16] -> \regfile[2] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2438 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [17] -> \regfile[2] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2439 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [18] -> \regfile[2] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2440 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [19] -> \regfile[2] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2441 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [20] -> \regfile[2] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2442 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [21] -> \regfile[2] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2443 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [22] -> \regfile[2] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2444 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [23] -> \regfile[2] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2445 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [24] -> \regfile[2] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2446 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [25] -> \regfile[2] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2447 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [26] -> \regfile[2] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2448 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [27] -> \regfile[2] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2449 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [28] -> \regfile[2] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2450 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [29] -> \regfile[2] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2451 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [30] -> \regfile[2] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2452 to $_DFFE_PP_ for $memory\regfile$wrmux[2][0][0]$y$1147 [31] -> \regfile[2] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2487 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [0] -> \regfile[1] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2488 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [1] -> \regfile[1] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2489 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [2] -> \regfile[1] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2490 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [3] -> \regfile[1] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2491 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [4] -> \regfile[1] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2492 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [5] -> \regfile[1] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2493 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [6] -> \regfile[1] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2494 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [7] -> \regfile[1] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2495 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [8] -> \regfile[1] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2496 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [9] -> \regfile[1] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2497 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [10] -> \regfile[1] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2498 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [11] -> \regfile[1] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2499 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [12] -> \regfile[1] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2500 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [13] -> \regfile[1] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2501 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [14] -> \regfile[1] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2502 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [15] -> \regfile[1] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2503 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [16] -> \regfile[1] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2504 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [17] -> \regfile[1] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2505 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [18] -> \regfile[1] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2506 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [19] -> \regfile[1] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2507 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [20] -> \regfile[1] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2508 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [21] -> \regfile[1] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2509 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [22] -> \regfile[1] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2510 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [23] -> \regfile[1] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2511 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [24] -> \regfile[1] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2512 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [25] -> \regfile[1] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2513 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [26] -> \regfile[1] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2514 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [27] -> \regfile[1] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2515 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [28] -> \regfile[1] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2516 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [29] -> \regfile[1] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2517 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [30] -> \regfile[1] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2518 to $_DFFE_PP_ for $memory\regfile$wrmux[1][0][0]$y$1137 [31] -> \regfile[1] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2519 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [0] -> \regfile[16] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2520 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [1] -> \regfile[16] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2521 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [2] -> \regfile[16] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2522 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [3] -> \regfile[16] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2523 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [4] -> \regfile[16] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2524 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [5] -> \regfile[16] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2525 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [6] -> \regfile[16] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2526 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [7] -> \regfile[16] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2527 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [8] -> \regfile[16] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2528 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [9] -> \regfile[16] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2529 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [10] -> \regfile[16] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2530 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [11] -> \regfile[16] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2531 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [12] -> \regfile[16] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2532 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [13] -> \regfile[16] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2533 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [14] -> \regfile[16] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2534 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [15] -> \regfile[16] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2535 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [16] -> \regfile[16] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2536 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [17] -> \regfile[16] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2537 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [18] -> \regfile[16] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2538 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [19] -> \regfile[16] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2539 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [20] -> \regfile[16] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2540 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [21] -> \regfile[16] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2541 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [22] -> \regfile[16] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2542 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [23] -> \regfile[16] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2543 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [24] -> \regfile[16] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2544 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [25] -> \regfile[16] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2545 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [26] -> \regfile[16] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2546 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [27] -> \regfile[16] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2547 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [28] -> \regfile[16] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2548 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [29] -> \regfile[16] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2549 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [30] -> \regfile[16] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2550 to $_DFFE_PP_ for $memory\regfile$wrmux[16][0][0]$y$1251 [31] -> \regfile[16] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2551 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [0] -> \regfile[0] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2552 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [1] -> \regfile[0] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2553 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [2] -> \regfile[0] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2554 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [3] -> \regfile[0] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2555 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [4] -> \regfile[0] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2556 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [5] -> \regfile[0] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2557 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [6] -> \regfile[0] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2558 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [7] -> \regfile[0] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2559 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [8] -> \regfile[0] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2560 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [9] -> \regfile[0] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2561 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [10] -> \regfile[0] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2562 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [11] -> \regfile[0] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2563 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [12] -> \regfile[0] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2564 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [13] -> \regfile[0] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2565 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [14] -> \regfile[0] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2566 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [15] -> \regfile[0] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2567 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [16] -> \regfile[0] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2568 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [17] -> \regfile[0] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2569 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [18] -> \regfile[0] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2570 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [19] -> \regfile[0] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2571 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [20] -> \regfile[0] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2572 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [21] -> \regfile[0] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2573 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [22] -> \regfile[0] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2574 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [23] -> \regfile[0] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2575 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [24] -> \regfile[0] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2576 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [25] -> \regfile[0] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2577 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [26] -> \regfile[0] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2578 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [27] -> \regfile[0] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2579 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [28] -> \regfile[0] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2580 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [29] -> \regfile[0] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2581 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [30] -> \regfile[0] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2582 to $_DFFE_PP_ for $memory\regfile$wrmux[0][0][0]$y$1127 [31] -> \regfile[0] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2615 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [0] -> \regfile[14] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2616 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [1] -> \regfile[14] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2617 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [2] -> \regfile[14] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2618 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [3] -> \regfile[14] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2619 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [4] -> \regfile[14] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2620 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [5] -> \regfile[14] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2621 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [6] -> \regfile[14] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2622 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [7] -> \regfile[14] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2623 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [8] -> \regfile[14] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2624 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [9] -> \regfile[14] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2625 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [10] -> \regfile[14] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2626 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [11] -> \regfile[14] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2627 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [12] -> \regfile[14] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2628 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [13] -> \regfile[14] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2629 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [14] -> \regfile[14] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2630 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [15] -> \regfile[14] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2631 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [16] -> \regfile[14] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2632 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [17] -> \regfile[14] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2633 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [18] -> \regfile[14] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2634 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [19] -> \regfile[14] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2635 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [20] -> \regfile[14] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2636 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [21] -> \regfile[14] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2637 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [22] -> \regfile[14] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2638 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [23] -> \regfile[14] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2639 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [24] -> \regfile[14] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2640 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [25] -> \regfile[14] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2641 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [26] -> \regfile[14] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2642 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [27] -> \regfile[14] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2643 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [28] -> \regfile[14] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2644 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [29] -> \regfile[14] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2645 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [30] -> \regfile[14] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2646 to $_DFFE_PP_ for $memory\regfile$wrmux[14][0][0]$y$1233 [31] -> \regfile[14] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2650 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [0] -> \regfile[17] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2651 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [1] -> \regfile[17] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2652 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [2] -> \regfile[17] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2653 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [3] -> \regfile[17] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2654 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [4] -> \regfile[17] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2655 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [5] -> \regfile[17] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2656 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [6] -> \regfile[17] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2657 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [7] -> \regfile[17] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2658 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [8] -> \regfile[17] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2659 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [9] -> \regfile[17] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2660 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [10] -> \regfile[17] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2661 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [11] -> \regfile[17] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2662 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [12] -> \regfile[17] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2663 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [13] -> \regfile[17] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2664 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [14] -> \regfile[17] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2665 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [15] -> \regfile[17] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2666 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [16] -> \regfile[17] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2667 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [17] -> \regfile[17] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2668 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [18] -> \regfile[17] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2669 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [19] -> \regfile[17] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2670 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [20] -> \regfile[17] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2671 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [21] -> \regfile[17] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2672 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [22] -> \regfile[17] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2673 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [23] -> \regfile[17] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2674 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [24] -> \regfile[17] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2675 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [25] -> \regfile[17] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2676 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [26] -> \regfile[17] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2677 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [27] -> \regfile[17] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2678 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [28] -> \regfile[17] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2679 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [29] -> \regfile[17] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2680 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [30] -> \regfile[17] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2681 to $_DFFE_PP_ for $memory\regfile$wrmux[17][0][0]$y$1257 [31] -> \regfile[17] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2682 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [0] -> \regfile[11] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2683 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [1] -> \regfile[11] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2684 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [2] -> \regfile[11] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2685 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [3] -> \regfile[11] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2686 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [4] -> \regfile[11] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2687 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [5] -> \regfile[11] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2688 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [6] -> \regfile[11] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2689 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [7] -> \regfile[11] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2690 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [8] -> \regfile[11] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2691 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [9] -> \regfile[11] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2692 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [10] -> \regfile[11] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2693 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [11] -> \regfile[11] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2694 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [12] -> \regfile[11] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2695 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [13] -> \regfile[11] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2696 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [14] -> \regfile[11] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2697 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [15] -> \regfile[11] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2698 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [16] -> \regfile[11] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2699 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [17] -> \regfile[11] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2700 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [18] -> \regfile[11] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2701 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [19] -> \regfile[11] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2702 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [20] -> \regfile[11] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2703 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [21] -> \regfile[11] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2704 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [22] -> \regfile[11] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2705 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [23] -> \regfile[11] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2706 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [24] -> \regfile[11] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2707 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [25] -> \regfile[11] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2708 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [26] -> \regfile[11] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2709 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [27] -> \regfile[11] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2710 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [28] -> \regfile[11] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2711 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [29] -> \regfile[11] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2712 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [30] -> \regfile[11] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2713 to $_DFFE_PP_ for $memory\regfile$wrmux[11][0][0]$y$1213 [31] -> \regfile[11] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2714 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [0] -> \regfile[7] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2715 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [1] -> \regfile[7] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2716 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [2] -> \regfile[7] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2717 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [3] -> \regfile[7] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2718 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [4] -> \regfile[7] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2719 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [5] -> \regfile[7] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2720 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [6] -> \regfile[7] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2721 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [7] -> \regfile[7] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2722 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [8] -> \regfile[7] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2723 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [9] -> \regfile[7] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2724 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [10] -> \regfile[7] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2725 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [11] -> \regfile[7] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2726 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [12] -> \regfile[7] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2727 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [13] -> \regfile[7] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2728 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [14] -> \regfile[7] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2729 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [15] -> \regfile[7] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2730 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [16] -> \regfile[7] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2731 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [17] -> \regfile[7] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2732 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [18] -> \regfile[7] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2733 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [19] -> \regfile[7] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2734 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [20] -> \regfile[7] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2735 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [21] -> \regfile[7] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2736 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [22] -> \regfile[7] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2737 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [23] -> \regfile[7] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2738 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [24] -> \regfile[7] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2739 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [25] -> \regfile[7] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2740 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [26] -> \regfile[7] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2741 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [27] -> \regfile[7] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2742 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [28] -> \regfile[7] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2743 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [29] -> \regfile[7] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2744 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [30] -> \regfile[7] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$2745 to $_DFFE_PP_ for $memory\regfile$wrmux[7][0][0]$y$1183 [31] -> \regfile[7] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3186 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [0] -> \regfile[15] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3187 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [1] -> \regfile[15] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3188 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [2] -> \regfile[15] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3189 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [3] -> \regfile[15] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3190 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [4] -> \regfile[15] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3191 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [5] -> \regfile[15] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3192 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [6] -> \regfile[15] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3193 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [7] -> \regfile[15] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3194 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [8] -> \regfile[15] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3195 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [9] -> \regfile[15] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3196 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [10] -> \regfile[15] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3197 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [11] -> \regfile[15] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3198 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [12] -> \regfile[15] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3199 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [13] -> \regfile[15] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3200 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [14] -> \regfile[15] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3201 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [15] -> \regfile[15] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3202 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [16] -> \regfile[15] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3203 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [17] -> \regfile[15] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3204 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [18] -> \regfile[15] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3205 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [19] -> \regfile[15] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3206 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [20] -> \regfile[15] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3207 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [21] -> \regfile[15] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3208 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [22] -> \regfile[15] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3209 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [23] -> \regfile[15] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3210 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [24] -> \regfile[15] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3211 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [25] -> \regfile[15] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3212 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [26] -> \regfile[15] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3213 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [27] -> \regfile[15] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3214 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [28] -> \regfile[15] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3215 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [29] -> \regfile[15] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3216 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [30] -> \regfile[15] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3217 to $_DFFE_PP_ for $memory\regfile$wrmux[15][0][0]$y$1239 [31] -> \regfile[15] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3894 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [0] -> \regfile[24] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3895 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [1] -> \regfile[24] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3896 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [2] -> \regfile[24] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3897 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [3] -> \regfile[24] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3898 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [4] -> \regfile[24] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3899 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [5] -> \regfile[24] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3900 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [6] -> \regfile[24] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3901 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [7] -> \regfile[24] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3902 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [8] -> \regfile[24] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3903 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [9] -> \regfile[24] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3904 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [10] -> \regfile[24] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3905 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [11] -> \regfile[24] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3906 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [12] -> \regfile[24] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3907 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [13] -> \regfile[24] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3908 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [14] -> \regfile[24] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3909 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [15] -> \regfile[24] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3910 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [16] -> \regfile[24] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3911 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [17] -> \regfile[24] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3912 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [18] -> \regfile[24] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3913 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [19] -> \regfile[24] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3914 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [20] -> \regfile[24] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3915 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [21] -> \regfile[24] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3916 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [22] -> \regfile[24] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3917 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [23] -> \regfile[24] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3918 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [24] -> \regfile[24] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3919 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [25] -> \regfile[24] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3920 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [26] -> \regfile[24] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3921 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [27] -> \regfile[24] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3922 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [28] -> \regfile[24] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3923 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [29] -> \regfile[24] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3924 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [30] -> \regfile[24] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3925 to $_DFFE_PP_ for $memory\regfile$wrmux[24][0][0]$y$1305 [31] -> \regfile[24] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3926 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [0] -> \regfile[25] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3927 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [1] -> \regfile[25] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3928 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [2] -> \regfile[25] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3929 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [3] -> \regfile[25] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3930 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [4] -> \regfile[25] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3931 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [5] -> \regfile[25] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3932 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [6] -> \regfile[25] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3933 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [7] -> \regfile[25] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3934 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [8] -> \regfile[25] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3935 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [9] -> \regfile[25] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3936 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [10] -> \regfile[25] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3937 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [11] -> \regfile[25] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3938 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [12] -> \regfile[25] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3939 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [13] -> \regfile[25] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3940 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [14] -> \regfile[25] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3941 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [15] -> \regfile[25] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3942 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [16] -> \regfile[25] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3943 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [17] -> \regfile[25] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3944 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [18] -> \regfile[25] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3945 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [19] -> \regfile[25] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3946 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [20] -> \regfile[25] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3947 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [21] -> \regfile[25] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3948 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [22] -> \regfile[25] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3949 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [23] -> \regfile[25] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3950 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [24] -> \regfile[25] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3951 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [25] -> \regfile[25] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3952 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [26] -> \regfile[25] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3953 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [27] -> \regfile[25] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3954 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [28] -> \regfile[25] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3955 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [29] -> \regfile[25] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3956 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [30] -> \regfile[25] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3957 to $_DFFE_PP_ for $memory\regfile$wrmux[25][0][0]$y$1311 [31] -> \regfile[25] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3958 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [0] -> \regfile[26] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3959 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [1] -> \regfile[26] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3960 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [2] -> \regfile[26] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3961 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [3] -> \regfile[26] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3962 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [4] -> \regfile[26] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3963 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [5] -> \regfile[26] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3964 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [6] -> \regfile[26] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3965 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [7] -> \regfile[26] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3966 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [8] -> \regfile[26] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3967 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [9] -> \regfile[26] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3968 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [10] -> \regfile[26] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3969 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [11] -> \regfile[26] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3970 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [12] -> \regfile[26] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3971 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [13] -> \regfile[26] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3972 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [14] -> \regfile[26] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3973 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [15] -> \regfile[26] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3974 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [16] -> \regfile[26] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3975 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [17] -> \regfile[26] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3976 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [18] -> \regfile[26] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3977 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [19] -> \regfile[26] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3978 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [20] -> \regfile[26] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3979 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [21] -> \regfile[26] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3980 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [22] -> \regfile[26] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3981 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [23] -> \regfile[26] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3982 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [24] -> \regfile[26] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3983 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [25] -> \regfile[26] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3984 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [26] -> \regfile[26] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3985 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [27] -> \regfile[26] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3986 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [28] -> \regfile[26] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3987 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [29] -> \regfile[26] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3988 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [30] -> \regfile[26] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$3989 to $_DFFE_PP_ for $memory\regfile$wrmux[26][0][0]$y$1317 [31] -> \regfile[26] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4027 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [0] -> \regfile[18] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4028 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [1] -> \regfile[18] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4029 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [2] -> \regfile[18] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4030 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [3] -> \regfile[18] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4031 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [4] -> \regfile[18] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4032 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [5] -> \regfile[18] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4033 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [6] -> \regfile[18] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4034 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [7] -> \regfile[18] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4035 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [8] -> \regfile[18] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4036 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [9] -> \regfile[18] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4037 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [10] -> \regfile[18] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4038 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [11] -> \regfile[18] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4039 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [12] -> \regfile[18] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4040 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [13] -> \regfile[18] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4041 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [14] -> \regfile[18] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4042 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [15] -> \regfile[18] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4043 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [16] -> \regfile[18] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4044 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [17] -> \regfile[18] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4045 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [18] -> \regfile[18] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4046 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [19] -> \regfile[18] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4047 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [20] -> \regfile[18] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4048 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [21] -> \regfile[18] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4049 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [22] -> \regfile[18] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4050 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [23] -> \regfile[18] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4051 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [24] -> \regfile[18] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4052 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [25] -> \regfile[18] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4053 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [26] -> \regfile[18] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4054 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [27] -> \regfile[18] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4055 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [28] -> \regfile[18] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4056 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [29] -> \regfile[18] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4057 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [30] -> \regfile[18] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4058 to $_DFFE_PP_ for $memory\regfile$wrmux[18][0][0]$y$1263 [31] -> \regfile[18] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4281 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [0] -> \regfile[12] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4282 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [1] -> \regfile[12] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4283 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [2] -> \regfile[12] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4284 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [3] -> \regfile[12] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4285 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [4] -> \regfile[12] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4286 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [5] -> \regfile[12] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4287 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [6] -> \regfile[12] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4288 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [7] -> \regfile[12] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4289 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [8] -> \regfile[12] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4290 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [9] -> \regfile[12] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4291 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [10] -> \regfile[12] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4292 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [11] -> \regfile[12] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4293 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [12] -> \regfile[12] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4294 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [13] -> \regfile[12] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4295 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [14] -> \regfile[12] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4296 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [15] -> \regfile[12] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4297 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [16] -> \regfile[12] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4298 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [17] -> \regfile[12] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4299 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [18] -> \regfile[12] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4300 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [19] -> \regfile[12] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4301 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [20] -> \regfile[12] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4302 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [21] -> \regfile[12] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4303 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [22] -> \regfile[12] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4304 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [23] -> \regfile[12] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4305 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [24] -> \regfile[12] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4306 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [25] -> \regfile[12] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4307 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [26] -> \regfile[12] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4308 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [27] -> \regfile[12] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4309 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [28] -> \regfile[12] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4310 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [29] -> \regfile[12] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4311 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [30] -> \regfile[12] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4312 to $_DFFE_PP_ for $memory\regfile$wrmux[12][0][0]$y$1221 [31] -> \regfile[12] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4517 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [0] -> \regfile[22] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4518 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [1] -> \regfile[22] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4519 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [2] -> \regfile[22] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4520 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [3] -> \regfile[22] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4521 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [4] -> \regfile[22] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4522 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [5] -> \regfile[22] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4523 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [6] -> \regfile[22] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4524 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [7] -> \regfile[22] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4525 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [8] -> \regfile[22] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4526 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [9] -> \regfile[22] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4527 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [10] -> \regfile[22] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4528 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [11] -> \regfile[22] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4529 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [12] -> \regfile[22] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4530 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [13] -> \regfile[22] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4531 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [14] -> \regfile[22] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4532 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [15] -> \regfile[22] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4533 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [16] -> \regfile[22] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4534 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [17] -> \regfile[22] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4535 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [18] -> \regfile[22] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4536 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [19] -> \regfile[22] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4537 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [20] -> \regfile[22] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4538 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [21] -> \regfile[22] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4539 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [22] -> \regfile[22] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4540 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [23] -> \regfile[22] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4541 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [24] -> \regfile[22] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4542 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [25] -> \regfile[22] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4543 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [26] -> \regfile[22] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4544 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [27] -> \regfile[22] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4545 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [28] -> \regfile[22] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4546 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [29] -> \regfile[22] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4547 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [30] -> \regfile[22] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$4548 to $_DFFE_PP_ for $memory\regfile$wrmux[22][0][0]$y$1289 [31] -> \regfile[22] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5105 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [0] -> \regfile[13] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5106 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [1] -> \regfile[13] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5107 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [2] -> \regfile[13] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5108 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [3] -> \regfile[13] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5109 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [4] -> \regfile[13] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5110 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [5] -> \regfile[13] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5111 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [6] -> \regfile[13] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5112 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [7] -> \regfile[13] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5113 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [8] -> \regfile[13] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5114 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [9] -> \regfile[13] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5115 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [10] -> \regfile[13] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5116 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [11] -> \regfile[13] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5117 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [12] -> \regfile[13] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5118 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [13] -> \regfile[13] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5119 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [14] -> \regfile[13] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5120 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [15] -> \regfile[13] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5121 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [16] -> \regfile[13] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5122 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [17] -> \regfile[13] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5123 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [18] -> \regfile[13] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5124 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [19] -> \regfile[13] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5125 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [20] -> \regfile[13] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5126 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [21] -> \regfile[13] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5127 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [22] -> \regfile[13] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5128 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [23] -> \regfile[13] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5129 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [24] -> \regfile[13] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5130 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [25] -> \regfile[13] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5131 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [26] -> \regfile[13] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5132 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [27] -> \regfile[13] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5133 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [28] -> \regfile[13] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5134 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [29] -> \regfile[13] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5135 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [30] -> \regfile[13] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5136 to $_DFFE_PP_ for $memory\regfile$wrmux[13][0][0]$y$1227 [31] -> \regfile[13] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5282 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [0] -> \regfile[23] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5283 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [1] -> \regfile[23] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5284 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [2] -> \regfile[23] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5285 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [3] -> \regfile[23] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5286 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [4] -> \regfile[23] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5287 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [5] -> \regfile[23] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5288 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [6] -> \regfile[23] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5289 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [7] -> \regfile[23] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5290 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [8] -> \regfile[23] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5291 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [9] -> \regfile[23] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5292 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [10] -> \regfile[23] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5293 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [11] -> \regfile[23] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5294 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [12] -> \regfile[23] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5295 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [13] -> \regfile[23] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5296 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [14] -> \regfile[23] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5297 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [15] -> \regfile[23] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5298 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [16] -> \regfile[23] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5299 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [17] -> \regfile[23] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5300 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [18] -> \regfile[23] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5301 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [19] -> \regfile[23] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5302 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [20] -> \regfile[23] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5303 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [21] -> \regfile[23] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5304 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [22] -> \regfile[23] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5305 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [23] -> \regfile[23] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5306 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [24] -> \regfile[23] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5307 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [25] -> \regfile[23] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5308 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [26] -> \regfile[23] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5309 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [27] -> \regfile[23] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5310 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [28] -> \regfile[23] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5311 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [29] -> \regfile[23] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5312 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [30] -> \regfile[23] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5313 to $_DFFE_PP_ for $memory\regfile$wrmux[23][0][0]$y$1295 [31] -> \regfile[23] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5516 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [0] -> \regfile[30] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5517 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [1] -> \regfile[30] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5518 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [2] -> \regfile[30] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5519 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [3] -> \regfile[30] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5520 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [4] -> \regfile[30] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5521 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [5] -> \regfile[30] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5522 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [6] -> \regfile[30] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5523 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [7] -> \regfile[30] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5524 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [8] -> \regfile[30] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5525 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [9] -> \regfile[30] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5526 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [10] -> \regfile[30] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5527 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [11] -> \regfile[30] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5528 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [12] -> \regfile[30] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5529 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [13] -> \regfile[30] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5530 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [14] -> \regfile[30] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5531 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [15] -> \regfile[30] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5532 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [16] -> \regfile[30] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5533 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [17] -> \regfile[30] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5534 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [18] -> \regfile[30] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5535 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [19] -> \regfile[30] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5536 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [20] -> \regfile[30] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5537 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [21] -> \regfile[30] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5538 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [22] -> \regfile[30] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5539 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [23] -> \regfile[30] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5540 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [24] -> \regfile[30] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5541 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [25] -> \regfile[30] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5542 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [26] -> \regfile[30] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5543 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [27] -> \regfile[30] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5544 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [28] -> \regfile[30] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5545 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [29] -> \regfile[30] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5546 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [30] -> \regfile[30] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5547 to $_DFFE_PP_ for $memory\regfile$wrmux[30][0][0]$y$1343 [31] -> \regfile[30] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5577 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [0] -> \regfile[8] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5578 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [1] -> \regfile[8] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5579 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [2] -> \regfile[8] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5580 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [3] -> \regfile[8] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5581 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [4] -> \regfile[8] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5582 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [5] -> \regfile[8] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5583 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [6] -> \regfile[8] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5584 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [7] -> \regfile[8] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5585 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [8] -> \regfile[8] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5586 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [9] -> \regfile[8] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5587 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [10] -> \regfile[8] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5588 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [11] -> \regfile[8] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5589 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [12] -> \regfile[8] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5590 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [13] -> \regfile[8] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5591 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [14] -> \regfile[8] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5592 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [15] -> \regfile[8] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5593 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [16] -> \regfile[8] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5594 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [17] -> \regfile[8] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5595 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [18] -> \regfile[8] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5596 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [19] -> \regfile[8] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5597 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [20] -> \regfile[8] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5598 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [21] -> \regfile[8] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5599 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [22] -> \regfile[8] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5600 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [23] -> \regfile[8] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5601 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [24] -> \regfile[8] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5602 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [25] -> \regfile[8] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5603 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [26] -> \regfile[8] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5604 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [27] -> \regfile[8] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5605 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [28] -> \regfile[8] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5606 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [29] -> \regfile[8] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5607 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [30] -> \regfile[8] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5608 to $_DFFE_PP_ for $memory\regfile$wrmux[8][0][0]$y$1195 [31] -> \regfile[8] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5609 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [0] -> \regfile[31] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5610 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [1] -> \regfile[31] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5611 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [2] -> \regfile[31] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5612 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [3] -> \regfile[31] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5613 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [4] -> \regfile[31] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5614 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [5] -> \regfile[31] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5615 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [6] -> \regfile[31] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5616 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [7] -> \regfile[31] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5617 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [8] -> \regfile[31] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5618 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [9] -> \regfile[31] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5619 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [10] -> \regfile[31] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5620 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [11] -> \regfile[31] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5621 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [12] -> \regfile[31] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5622 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [13] -> \regfile[31] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5623 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [14] -> \regfile[31] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5624 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [15] -> \regfile[31] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5625 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [16] -> \regfile[31] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5626 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [17] -> \regfile[31] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5627 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [18] -> \regfile[31] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5628 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [19] -> \regfile[31] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5629 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [20] -> \regfile[31] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5630 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [21] -> \regfile[31] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5631 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [22] -> \regfile[31] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5632 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [23] -> \regfile[31] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5633 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [24] -> \regfile[31] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5634 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [25] -> \regfile[31] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5635 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [26] -> \regfile[31] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5636 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [27] -> \regfile[31] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5637 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [28] -> \regfile[31] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5638 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [29] -> \regfile[31] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5639 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [30] -> \regfile[31] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5640 to $_DFFE_PP_ for $memory\regfile$wrmux[31][0][0]$y$1349 [31] -> \regfile[31] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5816 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [0] -> \regfile[29] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5817 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [1] -> \regfile[29] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5818 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [2] -> \regfile[29] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5819 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [3] -> \regfile[29] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5820 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [4] -> \regfile[29] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5821 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [5] -> \regfile[29] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5822 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [6] -> \regfile[29] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5823 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [7] -> \regfile[29] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5824 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [8] -> \regfile[29] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5825 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [9] -> \regfile[29] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5826 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [10] -> \regfile[29] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5827 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [11] -> \regfile[29] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5828 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [12] -> \regfile[29] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5829 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [13] -> \regfile[29] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5830 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [14] -> \regfile[29] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5831 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [15] -> \regfile[29] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5832 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [16] -> \regfile[29] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5833 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [17] -> \regfile[29] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5834 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [18] -> \regfile[29] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5835 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [19] -> \regfile[29] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5836 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [20] -> \regfile[29] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5837 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [21] -> \regfile[29] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5838 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [22] -> \regfile[29] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5839 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [23] -> \regfile[29] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5840 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [24] -> \regfile[29] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5841 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [25] -> \regfile[29] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5842 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [26] -> \regfile[29] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5843 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [27] -> \regfile[29] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5844 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [28] -> \regfile[29] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5845 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [29] -> \regfile[29] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5846 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [30] -> \regfile[29] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$5847 to $_DFFE_PP_ for $memory\regfile$wrmux[29][0][0]$y$1337 [31] -> \regfile[29] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6022 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [0] -> \regfile[21] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6023 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [1] -> \regfile[21] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6024 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [2] -> \regfile[21] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6025 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [3] -> \regfile[21] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6026 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [4] -> \regfile[21] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6027 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [5] -> \regfile[21] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6028 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [6] -> \regfile[21] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6029 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [7] -> \regfile[21] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6030 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [8] -> \regfile[21] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6031 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [9] -> \regfile[21] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6032 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [10] -> \regfile[21] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6033 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [11] -> \regfile[21] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6034 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [12] -> \regfile[21] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6035 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [13] -> \regfile[21] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6036 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [14] -> \regfile[21] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6037 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [15] -> \regfile[21] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6038 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [16] -> \regfile[21] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6039 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [17] -> \regfile[21] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6040 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [18] -> \regfile[21] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6041 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [19] -> \regfile[21] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6042 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [20] -> \regfile[21] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6043 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [21] -> \regfile[21] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6044 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [22] -> \regfile[21] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6045 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [23] -> \regfile[21] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6046 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [24] -> \regfile[21] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6047 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [25] -> \regfile[21] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6048 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [26] -> \regfile[21] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6049 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [27] -> \regfile[21] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6050 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [28] -> \regfile[21] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6051 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [29] -> \regfile[21] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6052 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [30] -> \regfile[21] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6053 to $_DFFE_PP_ for $memory\regfile$wrmux[21][0][0]$y$1283 [31] -> \regfile[21] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6278 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [0] -> \regfile[9] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6279 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [1] -> \regfile[9] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6280 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [2] -> \regfile[9] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6281 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [3] -> \regfile[9] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6282 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [4] -> \regfile[9] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6283 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [5] -> \regfile[9] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6284 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [6] -> \regfile[9] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6285 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [7] -> \regfile[9] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6286 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [8] -> \regfile[9] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6287 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [9] -> \regfile[9] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6288 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [10] -> \regfile[9] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6289 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [11] -> \regfile[9] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6290 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [12] -> \regfile[9] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6291 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [13] -> \regfile[9] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6292 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [14] -> \regfile[9] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6293 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [15] -> \regfile[9] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6294 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [16] -> \regfile[9] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6295 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [17] -> \regfile[9] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6296 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [18] -> \regfile[9] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6297 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [19] -> \regfile[9] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6298 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [20] -> \regfile[9] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6299 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [21] -> \regfile[9] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6300 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [22] -> \regfile[9] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6301 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [23] -> \regfile[9] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6302 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [24] -> \regfile[9] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6303 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [25] -> \regfile[9] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6304 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [26] -> \regfile[9] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6305 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [27] -> \regfile[9] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6306 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [28] -> \regfile[9] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6307 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [29] -> \regfile[9] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6308 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [30] -> \regfile[9] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6309 to $_DFFE_PP_ for $memory\regfile$wrmux[9][0][0]$y$1201 [31] -> \regfile[9] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6428 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [0] -> \regfile[28] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6429 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [1] -> \regfile[28] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6430 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [2] -> \regfile[28] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6431 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [3] -> \regfile[28] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6432 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [4] -> \regfile[28] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6433 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [5] -> \regfile[28] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6434 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [6] -> \regfile[28] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6435 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [7] -> \regfile[28] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6436 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [8] -> \regfile[28] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6437 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [9] -> \regfile[28] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6438 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [10] -> \regfile[28] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6439 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [11] -> \regfile[28] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6440 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [12] -> \regfile[28] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6441 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [13] -> \regfile[28] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6442 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [14] -> \regfile[28] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6443 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [15] -> \regfile[28] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6444 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [16] -> \regfile[28] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6445 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [17] -> \regfile[28] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6446 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [18] -> \regfile[28] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6447 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [19] -> \regfile[28] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6448 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [20] -> \regfile[28] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6449 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [21] -> \regfile[28] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6450 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [22] -> \regfile[28] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6451 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [23] -> \regfile[28] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6452 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [24] -> \regfile[28] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6453 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [25] -> \regfile[28] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6454 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [26] -> \regfile[28] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6455 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [27] -> \regfile[28] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6456 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [28] -> \regfile[28] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6457 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [29] -> \regfile[28] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6458 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [30] -> \regfile[28] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6459 to $_DFFE_PP_ for $memory\regfile$wrmux[28][0][0]$y$1331 [31] -> \regfile[28] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6571 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [0] -> \regfile[5] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6572 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [1] -> \regfile[5] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6573 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [2] -> \regfile[5] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6574 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [3] -> \regfile[5] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6575 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [4] -> \regfile[5] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6576 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [5] -> \regfile[5] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6577 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [6] -> \regfile[5] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6578 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [7] -> \regfile[5] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6579 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [8] -> \regfile[5] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6580 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [9] -> \regfile[5] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6581 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [10] -> \regfile[5] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6582 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [11] -> \regfile[5] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6583 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [12] -> \regfile[5] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6584 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [13] -> \regfile[5] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6585 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [14] -> \regfile[5] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6586 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [15] -> \regfile[5] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6587 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [16] -> \regfile[5] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6588 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [17] -> \regfile[5] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6589 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [18] -> \regfile[5] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6590 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [19] -> \regfile[5] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6591 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [20] -> \regfile[5] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6592 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [21] -> \regfile[5] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6593 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [22] -> \regfile[5] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6594 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [23] -> \regfile[5] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6595 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [24] -> \regfile[5] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6596 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [25] -> \regfile[5] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6597 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [26] -> \regfile[5] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6598 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [27] -> \regfile[5] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6599 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [28] -> \regfile[5] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6600 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [29] -> \regfile[5] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6601 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [30] -> \regfile[5] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6602 to $_DFFE_PP_ for $memory\regfile$wrmux[5][0][0]$y$1171 [31] -> \regfile[5] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6648 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [0] -> \regfile[27] [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6649 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [1] -> \regfile[27] [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6650 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [2] -> \regfile[27] [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6651 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [3] -> \regfile[27] [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6652 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [4] -> \regfile[27] [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6653 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [5] -> \regfile[27] [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6654 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [6] -> \regfile[27] [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6655 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [7] -> \regfile[27] [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6656 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [8] -> \regfile[27] [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6657 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [9] -> \regfile[27] [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6658 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [10] -> \regfile[27] [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6659 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [11] -> \regfile[27] [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6660 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [12] -> \regfile[27] [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6661 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [13] -> \regfile[27] [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6662 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [14] -> \regfile[27] [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6663 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [15] -> \regfile[27] [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6664 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [16] -> \regfile[27] [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6665 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [17] -> \regfile[27] [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6666 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [18] -> \regfile[27] [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6667 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [19] -> \regfile[27] [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6668 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [20] -> \regfile[27] [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6669 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [21] -> \regfile[27] [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6670 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [22] -> \regfile[27] [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6671 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [23] -> \regfile[27] [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6672 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [24] -> \regfile[27] [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6673 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [25] -> \regfile[27] [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6674 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [26] -> \regfile[27] [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6675 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [27] -> \regfile[27] [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6676 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [28] -> \regfile[27] [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6677 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [29] -> \regfile[27] [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6678 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [30] -> \regfile[27] [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$6679 to $_DFFE_PP_ for $memory\regfile$wrmux[27][0][0]$y$1323 [31] -> \regfile[27] [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8744 to $_DFFE_PP_ for $0\pc[31:0] [0] -> \pc [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8745 to $_DFFE_PP_ for $0\pc[31:0] [1] -> \pc [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8746 to $_DFFE_PP_ for $0\pc[31:0] [2] -> \pc [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8747 to $_DFFE_PP_ for $0\pc[31:0] [3] -> \pc [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8748 to $_DFFE_PP_ for $0\pc[31:0] [4] -> \pc [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8749 to $_DFFE_PP_ for $0\pc[31:0] [5] -> \pc [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8750 to $_DFFE_PP_ for $0\pc[31:0] [6] -> \pc [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8751 to $_DFFE_PP_ for $0\pc[31:0] [7] -> \pc [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8752 to $_DFFE_PP_ for $0\pc[31:0] [8] -> \pc [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8753 to $_DFFE_PP_ for $0\pc[31:0] [9] -> \pc [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8754 to $_DFFE_PP_ for $0\pc[31:0] [10] -> \pc [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8755 to $_DFFE_PP_ for $0\pc[31:0] [11] -> \pc [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8756 to $_DFFE_PP_ for $0\pc[31:0] [12] -> \pc [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8757 to $_DFFE_PP_ for $0\pc[31:0] [13] -> \pc [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8758 to $_DFFE_PP_ for $0\pc[31:0] [14] -> \pc [14].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8759 to $_DFFE_PP_ for $0\pc[31:0] [15] -> \pc [15].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8760 to $_DFFE_PP_ for $0\pc[31:0] [16] -> \pc [16].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8761 to $_DFFE_PP_ for $0\pc[31:0] [17] -> \pc [17].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8762 to $_DFFE_PP_ for $0\pc[31:0] [18] -> \pc [18].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8763 to $_DFFE_PP_ for $0\pc[31:0] [19] -> \pc [19].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8764 to $_DFFE_PP_ for $0\pc[31:0] [20] -> \pc [20].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8765 to $_DFFE_PP_ for $0\pc[31:0] [21] -> \pc [21].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8766 to $_DFFE_PP_ for $0\pc[31:0] [22] -> \pc [22].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8767 to $_DFFE_PP_ for $0\pc[31:0] [23] -> \pc [23].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8768 to $_DFFE_PP_ for $0\pc[31:0] [24] -> \pc [24].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8769 to $_DFFE_PP_ for $0\pc[31:0] [25] -> \pc [25].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8770 to $_DFFE_PP_ for $0\pc[31:0] [26] -> \pc [26].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8771 to $_DFFE_PP_ for $0\pc[31:0] [27] -> \pc [27].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8772 to $_DFFE_PP_ for $0\pc[31:0] [28] -> \pc [28].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8773 to $_DFFE_PP_ for $0\pc[31:0] [29] -> \pc [29].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8774 to $_DFFE_PP_ for $0\pc[31:0] [30] -> \pc [30].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$8775 to $_DFFE_PP_ for $0\pc[31:0] [31] -> \pc [31].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$9140 to $_DFFE_PP_ for $0\trapped[0:0] -> \trapped.

2.34. Executing TECHMAP pass (map to technology primitives).

2.34.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.34.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~1101 debug messages>

2.35. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~2150 debug messages>

2.36. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.37. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in nerv.

2.38. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in nerv.
  Merging $auto$simplemap.cc:277:simplemap_mux$4386 (A=\npc [0], B=1'0, S=$logic_or$nerv.sv:325$71_Y) into $auto$simplemap.cc:420:simplemap_dff$8744 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$4387 (A=\npc [1], B=1'0, S=$logic_or$nerv.sv:325$71_Y) into $auto$simplemap.cc:420:simplemap_dff$8745 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$9139 (A=\mem_rd_enable, B=1'0, S=\reset) into $auto$simplemap.cc:420:simplemap_dff$9174 (SB_DFF).

2.39. Executing ICE40_OPT pass (performing simple optimizations).

2.39.1. Running ICE40 specific optimizations.

2.39.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.
<suppressed ~184 debug messages>

2.39.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

2.39.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..
Removed 3 unused cells and 6545 unused wires.
<suppressed ~4 debug messages>

2.39.6. Rerunning OPT passes. (Removed registers in this run.)

2.39.7. Running ICE40 specific optimizations.

2.39.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module nerv.

2.39.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\nerv'.
Removed a total of 0 cells.

2.39.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.39.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \nerv..

2.39.12. Finished OPT passes. (There is nothing left to do.)

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.

2.41. Executing ABC pass (technology mapping using ABC).

2.41.1. Extracting gate netlist of module `\nerv' to `<abc-temp-dir>/input.blif'..
Extracted 5733 gates and 7148 wires to a netlist network with 1413 inputs and 342 outputs.

2.41.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =    1185.
ABC: Participating nodes from both networks       =    2598.
ABC: Participating nodes from the first network   =    1256. (  38.18 % of nodes)
ABC: Participating nodes from the second network  =    1342. (  40.79 % of nodes)
ABC: Node pairs (any polarity)                    =    1253. (  38.09 % of names can be moved)
ABC: Node pairs (same polarity)                   =     666. (  20.24 % of names can be moved)
ABC: Total runtime =     0.22 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.41.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:     6578
ABC RESULTS:        internal signals:     5393
ABC RESULTS:           input signals:     1413
ABC RESULTS:          output signals:      342
Removing temp directory.
Removed 0 unused cells and 2314 unused wires.

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111110100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100010011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111101000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100010100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000000010001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111110011110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001111110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111100000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110001011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111100000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110001110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100001101010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110101100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010100110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01011100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100010001000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10101100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011101100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000111110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00111010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01101001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1010001100110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101110000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101000001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000001001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011000100011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101011110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000101111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000001110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1101000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111101010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101001100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010100111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010111110011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101010011001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000010111111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011111001100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100110100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111011100000011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111110111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001111111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000011010101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1110111111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111101110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111001011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000111011101110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
No more expansions possible.
<suppressed ~5082 debug messages>
Removed 0 unused cells and 6578 unused wires.

2.43. Executing HIERARCHY pass (managing design hierarchy).

2.43.1. Analyzing design hierarchy..
Top module:  \nerv

2.43.2. Analyzing design hierarchy..
Top module:  \nerv
Removed 0 unused modules.

2.44. Printing statistics.

=== nerv ===

   Number of wires:               3302
   Number of wire bits:           5416
   Number of public wires:          73
   Number of public wire bits:    1722
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4990
     SB_CARRY                      359
     SB_DFF                         43
     SB_DFFE                      1055
     SB_DFFESR                       2
     SB_DFFSR                        1
     SB_LUT4                      3530

2.45. Executing CHECK pass (checking for obvious problems).
checking module nerv..
found and reported 0 problems.

2.46. Executing JSON backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 64f0af016e
CPU: user 14.13s system 0.04s, MEM: 54.29 MB total, 48.21 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 27% 27x opt_merge (3 sec), 25% 35x opt_expr (3 sec), 23% 31x opt_clean (3 sec), ...
